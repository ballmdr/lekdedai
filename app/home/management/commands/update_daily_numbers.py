from django.core.management.base import BaseCommand
from django.utils import timezone
from datetime import timedelta
import logging

from news.models import NewsArticle
from ai_engine.models import EnsemblePrediction

logger = logging.getLogger(__name__)

class Command(BaseCommand):
    help = 'Update daily lucky numbers from news and AI predictions'
    
    def add_arguments(self, parser):
        parser.add_argument(
            '--force',
            action='store_true',
            help='Force update even if numbers already exist for today'
        )
    
    def handle(self, *args, **options):
        today = timezone.now().date()
        self.stdout.write(f'üéØ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô {today}')
        
        # 1. ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å‡∏Ç‡πà‡∏≤‡∏ß 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        news_count = self.update_news_numbers()
        
        # 2. ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏•‡∏Ç AI predictions
        ai_count = self.update_ai_predictions()
        
        # 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
        self.generate_report(news_count, ai_count)
        
        self.stdout.write(
            self.style.SUCCESS(f'‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ‡∏Ç‡πà‡∏≤‡∏ß {news_count} ‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°, AI {ai_count} ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢')
        )
    
    def update_news_numbers(self):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å‡∏Ç‡πà‡∏≤‡∏ß 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"""
        cutoff_time = timezone.now() - timedelta(hours=24)
        
        recent_news = NewsArticle.objects.filter(
            status='published',
            published_date__gte=cutoff_time
        ).order_by('-published_date')
        
        self.stdout.write(f'üì∞ ‡∏û‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡πÉ‡∏´‡∏°‡πà {recent_news.count()} ‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°')
        
        all_numbers = []
        for article in recent_news:
            numbers = article.get_extracted_numbers_list()
            # ‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏•‡∏Ç 2 ‡∏´‡∏•‡∏±‡∏Å
            two_digit_numbers = [num for num in numbers if len(num) == 2]
            all_numbers.extend(two_digit_numbers[:2])  # ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 2 ‡πÄ‡∏•‡∏Ç‡∏ï‡πà‡∏≠‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°
        
        unique_numbers = list(set(all_numbers))[:6]  # ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 6 ‡πÄ‡∏•‡∏Ç
        
        if unique_numbers:
            self.stdout.write(f'üî¢ ‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å‡∏Ç‡πà‡∏≤‡∏ß: {", ".join(unique_numbers)}')
        else:
            self.stdout.write('‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏•‡∏Ç‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡∏Ç‡πà‡∏≤‡∏ß')
            
        return recent_news.count()
    
    def update_ai_predictions(self):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å AI predictions"""
        ai_predictions = EnsemblePrediction.objects.filter(
            session__status__in=['completed', 'locked'],
            overall_confidence__gte=0.70
        ).order_by('-prediction_timestamp')
        
        self.stdout.write(f'ü§ñ ‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ AI {ai_predictions.count()} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£')
        
        all_numbers = []
        for prediction in ai_predictions[:3]:
            if hasattr(prediction, 'get_top_two_digit_numbers') and prediction.get_top_two_digit_numbers:
                numbers = [
                    item.get('number', item) if isinstance(item, dict) else item 
                    for item in prediction.get_top_two_digit_numbers[:2]
                ]
                all_numbers.extend(numbers)
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç 2 ‡∏´‡∏•‡∏±‡∏Å
        unique_numbers = list(set([
            str(num).zfill(2) for num in all_numbers 
            if str(num).isdigit()
        ]))[:3]
        
        if unique_numbers:
            self.stdout.write(f'üî¢ ‡πÄ‡∏•‡∏Ç AI: {", ".join(unique_numbers)}')
        else:
            self.stdout.write('‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏•‡∏Ç‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å AI')
            
        return ai_predictions.count()
    
    def generate_report(self, news_count, ai_count):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ"""
        today = timezone.now()
        self.stdout.write('\nüìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ:')
        self.stdout.write(f'   ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {today.strftime("%d/%m/%Y %H:%M")}')
        self.stdout.write(f'   ‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: {news_count} ‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°')
        self.stdout.write(f'   ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ AI: {ai_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£')
        self.stdout.write(f'   ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‚úÖ')