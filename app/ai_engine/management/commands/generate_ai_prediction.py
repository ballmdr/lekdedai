"""
Management command ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ AI
"""

from django.core.management.base import BaseCommand, CommandError
from django.utils import timezone
from datetime import datetime, timedelta
from ai_engine.prediction_engine import PredictionEngine
from ai_engine.models import PredictionSession, EnsemblePrediction
import logging

logger = logging.getLogger(__name__)

class Command(BaseCommand):
    help = '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î‡∏î‡πâ‡∏ß‡∏¢ AI Ensemble Model'

    def add_arguments(self, parser):
        parser.add_argument(
            '--draw-date',
            type=str,
            help='‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏á‡∏ß‡∏î‡∏´‡∏ß‡∏¢ (‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö YYYY-MM-DD) ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏á‡∏ß‡∏î‡∏ñ‡∏±‡∏î‡πÑ‡∏õ'
        )
        
        parser.add_argument(
            '--force',
            action='store_true',
            help='‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà ‡πÅ‡∏°‡πâ‡∏à‡∏∞‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß'
        )
        
        parser.add_argument(
            '--session-id',
            type=str,
            help='ID ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà'
        )
        
        parser.add_argument(
            '--lock-predictions',
            action='store_true',
            help='‡∏•‡πá‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏ (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á)'
        )
        
        parser.add_argument(
            '--show-stats',
            action='store_true',
            help='‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î'
        )

    def handle(self, *args, **options):
        engine = PredictionEngine()
        
        try:
            # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
            if options['show_stats']:
                self._show_prediction_stats()
                return
            
            # ‡∏•‡πá‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
            if options['lock_predictions']:
                if not options['draw_date']:
                    raise CommandError('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ --draw-date ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ --lock-predictions')
                
                draw_date = datetime.strptime(options['draw_date'], '%Y-%m-%d').date()
                engine.lock_predictions_for_draw_date(draw_date)
                self.stdout.write(
                    self.style.SUCCESS(f'‡∏•‡πá‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏ß‡∏î‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {draw_date} ‡πÅ‡∏•‡πâ‡∏ß')
                )
                return
            
            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏á‡∏ß‡∏î
            if options['draw_date']:
                draw_date = datetime.strptime(options['draw_date'], '%Y-%m-%d').date()
            else:
                # ‡∏´‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏á‡∏ß‡∏î‡∏ñ‡∏±‡∏î‡πÑ‡∏õ (‡∏™‡∏°‡∏°‡∏∏‡∏ï‡∏¥‡∏´‡∏ß‡∏¢‡∏≠‡∏≠‡∏Å‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 1 ‡πÅ‡∏•‡∏∞ 16 ‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)
                draw_date = self._get_next_draw_date()
            
            # ‡∏£‡∏±‡∏ô‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞
            if options['session_id']:
                try:
                    session = PredictionSession.objects.get(session_id=options['session_id'])
                    self.stdout.write(f'‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ô‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô {session.session_id}...')
                    ensemble_prediction = engine.run_prediction(session)
                    self._display_prediction_results(ensemble_prediction)
                    return
                except PredictionSession.DoesNotExist:
                    raise CommandError(f'‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô {options["session_id"]}')
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            existing_prediction = EnsemblePrediction.objects.filter(
                session__for_draw_date=draw_date,
                session__status__in=['completed', 'locked']
            ).first()
            
            if existing_prediction and not options['force']:
                self.stdout.write(
                    self.style.WARNING(f'‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏ß‡∏î {draw_date} ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß')
                )
                self.stdout.write('‡πÉ‡∏ä‡πâ --force ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà ‡∏´‡∏£‡∏∑‡∏≠ --show-stats ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå')
                self._display_prediction_results(existing_prediction)
                return
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
            self.stdout.write(f'‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏ß‡∏î {draw_date}...')
            session = engine.create_prediction_session(draw_date)
            
            self.stdout.write(f'‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô ID: {session.session_id}')
            self.stdout.write(f'‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {session.data_collection_period_start} ‡∏ñ‡∏∂‡∏á {session.data_collection_period_end}')
            
            # ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
            self.stdout.write('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ AI...')
            self.stdout.write('- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢ Journalist AI...')
            self.stdout.write('- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢ Dream Interpreter AI...')
            self.stdout.write('- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢ Statistical Trend AI...')
            self.stdout.write('- ‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå...')
            
            ensemble_prediction = engine.run_prediction(session)
            
            self.stdout.write(self.style.SUCCESS('‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ AI ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!'))
            self._display_prediction_results(ensemble_prediction)
            
        except Exception as e:
            logger.error(f'Error in AI prediction: {str(e)}')
            raise CommandError(f'‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢: {str(e)}')
    
    def _get_next_draw_date(self) -> datetime.date:
        """‡∏´‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏á‡∏ß‡∏î‡∏ñ‡∏±‡∏î‡πÑ‡∏õ"""
        today = timezone.now().date()
        
        # ‡∏™‡∏°‡∏°‡∏∏‡∏ï‡∏¥‡∏´‡∏ß‡∏¢‡∏≠‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 1 ‡πÅ‡∏•‡∏∞ 16 ‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
        if today.day < 16:
            return today.replace(day=16)
        else:
            # ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 1
            if today.month == 12:
                return today.replace(year=today.year + 1, month=1, day=1)
            else:
                return today.replace(month=today.month + 1, day=1)
    
    def _display_prediction_results(self, prediction: EnsemblePrediction):
        """‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢"""
        self.stdout.write('\\n' + '='*50)
        self.stdout.write(self.style.SUCCESS('üéØ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ AI Ensemble Model'))
        self.stdout.write('='*50)
        
        self.stdout.write(f'üìÖ ‡∏á‡∏ß‡∏î‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {prediction.session.for_draw_date}')
        timestamp_str = prediction.prediction_timestamp.strftime("%d/%m/%Y %H:%M:%S")
        self.stdout.write(f'üïê ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢: {timestamp_str}')
        self.stdout.write(f'üìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏£‡∏ß‡∏°: {prediction.overall_confidence:.1%}')
        self.stdout.write(f'üìà ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ: {prediction.total_data_points:,} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£')
        
        # ‡πÄ‡∏•‡∏Ç 2 ‡∏ï‡∏±‡∏ß‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
        if prediction.final_two_digit:
            self.stdout.write('\\nüé≤ ‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:')
            for i, item in enumerate(prediction.get_top_two_digit_numbers(), 1):
                number = item["number"]
                confidence = item["confidence"]
                reasoning = item["reasoning"][:80]
                self.stdout.write(f'  {i}. {number} (‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à {confidence:.1%})')
                self.stdout.write(f'     üí° {reasoning}...')
        
        # ‡πÄ‡∏•‡∏Ç 3 ‡∏ï‡∏±‡∏ß‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
        if prediction.final_three_digit:
            self.stdout.write('\\nüéØ ‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 3 ‡∏ï‡∏±‡∏ß‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:')
            for i, item in enumerate(prediction.get_top_three_digit_numbers(), 1):
                number = item["number"]
                confidence = item["confidence"]
                reasoning = item["reasoning"][:80]
                self.stdout.write(f'  {i}. {number} (‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à {confidence:.1%})')
                self.stdout.write(f'     üí° {reasoning}...')
        
        # ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
        self.stdout.write(f'\\nüìù ‡∏™‡∏£‡∏∏‡∏õ: {prediction.prediction_summary}')
        
        # ‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÇ‡∏°‡πÄ‡∏î‡∏•
        if prediction.model_contributions:
            self.stdout.write('\\nü§ñ ‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• AI:')
            for model_name, contribution in prediction.model_contributions.items():
                weight = contribution["weight"]
                self.stdout.write(f'  - {model_name}: ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å {weight:.1%}')
                if contribution.get('top_numbers'):
                    two_digit = contribution['top_numbers'].get('two_digit', [])[:2]
                    if two_digit:
                        numbers_str = ", ".join(two_digit)
                        self.stdout.write(f'    ‡πÄ‡∏•‡∏Ç‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: {numbers_str}')
        
        self.stdout.write('\\n' + '='*50)
        self.stdout.write('üåü ‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î‡∏à‡∏≤‡∏Å AI ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß! ‡πÇ‡∏ä‡∏Ñ‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö/‡∏Ñ‡πà‡∏∞ üåü')
        self.stdout.write('='*50)
    
    def _show_prediction_stats(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢"""
        from django.db.models import Count, Avg
        
        self.stdout.write('\\n' + '='*40)
        self.stdout.write('üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ AI')
        self.stdout.write('='*40)
        
        # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        total_predictions = EnsemblePrediction.objects.count()
        self.stdout.write(f'‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_predictions} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á')
        
        # ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        latest = EnsemblePrediction.objects.order_by('-prediction_timestamp').first()
        if latest:
            self.stdout.write(f'‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ‡∏á‡∏ß‡∏î {latest.session.for_draw_date}')
            self.stdout.write(f'‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à: {latest.overall_confidence:.1%}')
        
        # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
        avg_confidence = EnsemblePrediction.objects.aggregate(
            avg_conf=Avg('overall_confidence')
        )['avg_conf']
        
        if avg_confidence:
            self.stdout.write(f'‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {avg_confidence:.1%}')
        
        # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô
        sessions_by_status = dict(
            PredictionSession.objects.values('status')
            .annotate(count=Count('id'))
            .values_list('status', 'count')
        )
        
        self.stdout.write('\\n‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô:')
        for status, count in sessions_by_status.items():
            self.stdout.write(f'  {status}: {count} ‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô')
        
        self.stdout.write('='*40)