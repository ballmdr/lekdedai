import feedparser
import requests
from django.core.management.base import BaseCommand
from django.utils import timezone
from django.utils.dateparse import parse_datetime
from django.db import transaction
from bs4 import BeautifulSoup
from ai_engine.models import DataSource, DataIngestionRecord
from news.models import NewsArticle, NewsCategory
from news.news_analyzer import NewsAnalyzer
import re
from datetime import datetime

class Command(BaseCommand):
    help = '‡∏î‡∏∂‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏à‡∏≤‡∏Å RSS feeds ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏£‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå'

    def add_arguments(self, parser):
        parser.add_argument(
            '--limit',
            type=int,
            default=20,
            help='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πà‡∏≤‡∏ß‡∏ï‡πà‡∏≠ feed ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏î‡∏∂‡∏á (default: 20)'
        )
        
        parser.add_argument(
            '--source',
            type=str,
            help='‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å DataSource ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ (‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠)'
        )

    def handle(self, *args, **options):
        limit = options['limit']
        source_name = options.get('source')
        
        self.stdout.write(
            self.style.SUCCESS(f'üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡∏∂‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏à‡∏≤‡∏Å RSS feeds (‡∏à‡∏≥‡∏Å‡∏±‡∏î {limit} ‡∏Ç‡πà‡∏≤‡∏ß/‡πÅ‡∏´‡∏•‡πà‡∏á)')
        )
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î category ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
        category, created = NewsCategory.objects.get_or_create(
            name='‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ',
            defaults={'slug': 'general', 'description': '‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏à‡∏≤‡∏Å RSS feeds'}
        )
        
        # ‡∏î‡∏∂‡∏á Data Sources
        if source_name:
            sources = DataSource.objects.filter(name__icontains=source_name, is_active=True)
        else:
            sources = DataSource.objects.filter(source_type='news', is_active=True)
        
        if not sources:
            self.stdout.write(
                self.style.WARNING('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö RSS feeds ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà')
            )
            return
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á analyzer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ç‡πà‡∏≤‡∏ß
        analyzer = NewsAnalyzer()
        
        total_processed = 0
        total_high_score = 0
        
        for source in sources:
            self.stdout.write(f'\nüì° ‡∏î‡∏∂‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏à‡∏≤‡∏Å: {source.name}')
            self.stdout.write(f'üîó URL: {source.url}')
            
            try:
                # ‡∏î‡∏∂‡∏á RSS feed
                feed = feedparser.parse(source.url)
                
                if feed.bozo:
                    self.stdout.write(
                        self.style.WARNING(f'‚ö†Ô∏è  RSS feed ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤: {source.name}')
                    )
                    continue
                
                entries = feed.entries[:limit]
                self.stdout.write(f'üì∞ ‡∏û‡∏ö‡∏Ç‡πà‡∏≤‡∏ß: {len(entries)} ‡∏Ç‡πà‡∏≤‡∏ß')
                
                source_processed = 0
                source_high_score = 0
                
                for entry in entries:
                    try:
                        with transaction.atomic():
                            # ‡∏î‡∏∂‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡πà‡∏≤‡∏ß
                            title = entry.title
                            link = getattr(entry, 'link', '')
                            
                            # ‡∏î‡∏∂‡∏á content
                            content = self._extract_content(entry)
                            if len(content) < 50:  # ‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏±‡πâ‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
                                continue
                            
                            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡∏ã‡πâ‡∏≥
                            if NewsArticle.objects.filter(title=title).exists():
                                continue
                            
                            # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà
                            temp_article = type('TempArticle', (), {
                                'title': title,
                                'content': content
                            })()
                            
                            analysis = analyzer.analyze_article(temp_article)
                            
                            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πà‡∏≤‡∏ß
                            article = NewsArticle.objects.create(
                                title=title[:200],  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß
                                content=content,
                                intro=content[:500],
                                category=category,
                                source_url=link,
                                status='published',
                                published_date=timezone.now(),
                                # ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà
                                lottery_relevance_score=analysis['confidence'],
                                lottery_category=analysis.get('category', 'general'),
                                extracted_numbers=','.join(analysis['numbers'][:10]) if analysis['numbers'] else '',
                                confidence_score=analysis['confidence']
                            )
                            
                            source_processed += 1
                            
                            # ‡∏ô‡∏±‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á
                            if analysis['confidence'] >= 80:
                                source_high_score += 1
                                self.stdout.write(
                                    self.style.SUCCESS(
                                        f'üéØ ‡∏Ç‡πà‡∏≤‡∏ß‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á: {title[:50]}... '
                                        f'(‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: {analysis["confidence"]}, ‡∏´‡∏°‡∏ß‡∏î: {analysis["category"]})'
                                    )
                                )
                            elif analysis['confidence'] >= 60:
                                self.stdout.write(f'‚≠ê {title[:50]}... (‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: {analysis["confidence"]})')
                            else:
                                self.stdout.write(f'üì∞ {title[:50]}... (‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: {analysis["confidence"]})')
                            
                            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô DataIngestionRecord
                            DataIngestionRecord.objects.create(
                                data_source=source,
                                raw_content=f"{title}\\n{content}",
                                processed_content=content,
                                title=title,
                                extracted_numbers=analysis['numbers'],
                                relevance_score=analysis['confidence'],
                                processing_status='completed'
                            )
                            
                    except Exception as e:
                        self.stdout.write(
                            self.style.ERROR(f'‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {entry.title[:30]}... - {str(e)}')
                        )
                        continue
                
                # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
                source.last_scraped = timezone.now()
                source.save()
                
                total_processed += source_processed
                total_high_score += source_high_score
                
                self.stdout.write(
                    f'‚úÖ {source.name}: {source_processed} ‡∏Ç‡πà‡∏≤‡∏ß (‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á: {source_high_score})'
                )
                
            except Exception as e:
                self.stdout.write(
                    self.style.ERROR(f'‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà {source.name}: {str(e)}')
                )
                continue
        
        # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        self.stdout.write('\n' + '='*50)
        self.stdout.write(
            self.style.SUCCESS(f'üéØ ‡∏î‡∏∂‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!')
        )
        self.stdout.write(f'üì∞ ‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_processed} ‡∏Ç‡πà‡∏≤‡∏ß')
        self.stdout.write(f'üî• ‡∏Ç‡πà‡∏≤‡∏ß‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á (‚â•80): {total_high_score} ‡∏Ç‡πà‡∏≤‡∏ß')
        
        if total_high_score > 0:
            percentage = (total_high_score / total_processed) * 100 if total_processed > 0 else 0
            self.stdout.write(
                self.style.SUCCESS(f'üìä ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ç‡πà‡∏≤‡∏ß‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û: {percentage:.1f}%')
            )
        
        # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
        self._show_category_stats()
    
    def _extract_content(self, entry):
        """‡∏™‡∏Å‡∏±‡∏î‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏à‡∏≤‡∏Å RSS entry"""
        content = ''
        
        # ‡∏•‡∏≠‡∏á‡∏´‡∏≤ content ‡∏à‡∏≤‡∏Å‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ
        if hasattr(entry, 'content'):
            content = entry.content[0].value if entry.content else ''
        elif hasattr(entry, 'summary'):
            content = entry.summary
        elif hasattr(entry, 'description'):
            content = entry.description
        
        # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î HTML
        if content:
            soup = BeautifulSoup(content, 'html.parser')
            content = soup.get_text().strip()
            
            # ‡∏•‡∏ö whitespace ‡πÄ‡∏Å‡∏¥‡∏ô
            content = re.sub(r'\\s+', ' ', content)
            
        return content or '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÑ‡∏î‡πâ'
    
    def _show_category_stats(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"""
        from django.db.models import Count
        
        stats = NewsArticle.objects.values('lottery_category').annotate(
            count=Count('id')
        ).order_by('-count')
        
        if stats:
            self.stdout.write('\\nüìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà:')
            category_names = {
                'accident': 'üî• ‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏',
                'celebrity': '‚≠ê ‡∏Ñ‡∏ô‡∏î‡∏±‡∏á',
                'economic': 'üìà ‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à',
                'general': 'üì∞ ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ'
            }
            
            for stat in stats:
                category = stat['lottery_category']
                count = stat['count']
                name = category_names.get(category, category)
                self.stdout.write(f'  {name}: {count} ‡∏Ç‡πà‡∏≤‡∏ß')