# -*- coding: utf-8 -*-
import os
import sys
import django
from datetime import datetime

# --- Setup Django ---
sys.path.append('/app')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'lekdedai.settings')
django.setup()

from news.models import NewsArticle
from news.mock_gemini_analyzer import MockGeminiLotteryAnalyzer

def main():
    today = datetime.now()
    today_date_thai = today.strftime("%d %B %Y")
    
    print(f"=== ‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πà‡∏≤‡∏ß‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {today_date_thai} ===")
    print()
    
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    recent_news = NewsArticle.objects.order_by('-published_date')[:5]
    
    if not recent_news:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        return
    
    print(f"‚úÖ ‡∏û‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î {len(recent_news)} ‡∏Ç‡πà‡∏≤‡∏ß")
    print()
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á Mock Analyzer
    analyzer = MockGeminiLotteryAnalyzer()
    
    # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ç‡πà‡∏≤‡∏ß
    all_numbers = []
    
    for i, article in enumerate(recent_news, 1):
        print(f"üì∞ {i}. {article.title}")
        print(f"   ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: {article.lottery_category or '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}")
        
        if article.extracted_numbers:
            numbers = article.extracted_numbers.split(',')
            all_numbers.extend([n.strip() for n in numbers if n.strip()])
            print(f"   üî¢ ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ: {article.extracted_numbers}")
            print(f"   üìä ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: {article.lottery_relevance_score}/100")
        else:
            # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢ Mock ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏•‡∏Ç
            result = analyzer.analyze_news_for_lottery(article.title, article.content[:1000])
            if result['numbers']:
                print(f"   üî¢ ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏î‡πâ: {', '.join(result['numbers'])}")
                all_numbers.extend(result['numbers'])
            else:
                print("   ‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏î‡πâ")
        
        print()
    
    # ‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô
    if all_numbers:
        # ‡πÄ‡∏≠‡∏≤‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥ ‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÅ‡∏Ñ‡πà 15 ‡∏ï‡∏±‡∏ß
        unique_numbers = list(dict.fromkeys(all_numbers))[:15]
        
        print("üéØ ‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏Ç‡πà‡∏≤‡∏ß:")
        print("=" * 40)
        
        # ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏Ç
        single_digit = [n for n in unique_numbers if len(n) == 1]
        double_digit = [n for n in unique_numbers if len(n) == 2]
        triple_digit = [n for n in unique_numbers if len(n) == 3]
        
        if single_digit:
            print(f"‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πà‡∏ô (1 ‡∏´‡∏•‡∏±‡∏Å): {', '.join(single_digit)}")
        if double_digit:
            print(f"‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î (2 ‡∏´‡∏•‡∏±‡∏Å): {', '.join(double_digit)}")
        if triple_digit:
            print(f"‡πÄ‡∏•‡∏Ç 3 ‡∏ï‡∏±‡∏ß: {', '.join(triple_digit[:5])}")  # ‡πÅ‡∏Ñ‡πà 5 ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å
        
        print()
        print(f"üé≤ ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {', '.join(unique_numbers)}")
        
    else:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î‡∏à‡∏≤‡∏Å‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
    
    print()
    print("=" * 40)
    print("‚úÖ ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
    print("üìù ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å: ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏µ‡πà scrape ‡πÅ‡∏•‡∏∞ Mock AI Analyzer")

if __name__ == "__main__":
    main()