# -*- coding: utf-8 -*-
import os
import sys
import django
import google.generativeai as genai
from datetime import datetime

# --- Setup Django ---
sys.path.append('/app')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'lekdedai.settings')
django.setup()

from news.models import NewsArticle

# --- Setup Gemini Flash Lite ---
api_key = "AIzaSyAjivjnnUo2AL5v4HGVkC4mTIH4kxMyOPU"
genai.configure(api_key=api_key)

# ‡πÉ‡∏ä‡πâ model standard (Flash) ‡πÅ‡∏ó‡∏ô Lite ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥
model = genai.GenerativeModel('gemini-1.5-flash')

def analyze_with_gemini_lite():
    today = datetime.now()
    today_date_thai = today.strftime("%d %B %Y")
    
    print(f"=== Gemini Flash Lite Analysis - {today_date_thai} ===")
    print()
    
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    recent_news = NewsArticle.objects.order_by('-published_date')[:3]  # ‡∏•‡∏î quota ‡πÉ‡∏ä‡πâ‡πÅ‡∏Ñ‡πà 3 ‡∏Ç‡πà‡∏≤‡∏ß
    
    if not recent_news:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        return
    
    print(f"‚úÖ ‡∏û‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î {len(recent_news)} ‡∏Ç‡πà‡∏≤‡∏ß")
    print()
    
    all_numbers = []
    
    for i, article in enumerate(recent_news, 1):
        print(f"üîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏µ‡πà {i}: {article.title[:60]}...")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á prompt ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ï‡∏µ‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å‡∏Ç‡πà‡∏≤‡∏ß
        prompt = f"""
‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏ï‡∏µ‡πÄ‡∏•‡∏Ç‡∏´‡∏ß‡∏¢‡πÑ‡∏ó‡∏¢ ‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î‡∏à‡∏≤‡∏Å‡∏Ç‡πà‡∏≤‡∏ß‡∏ô‡∏µ‡πâ:

{article.title}

{article.content[:500]}

‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: ‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏∏‡∏Å‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏µ‡πÄ‡∏•‡∏Ç‡πÑ‡∏î‡πâ ‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÉ‡∏î‡∏Å‡πá‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡πà‡∏≤‡∏ß ‡πÄ‡∏ä‡πà‡∏ô ‡∏≠‡∏≤‡∏¢‡∏∏, ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô, ‡πÄ‡∏ß‡∏•‡∏≤, ‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô, ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç

‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô:
{{
  "is_relevant": true,
  "category": "accident/politics/crime/celebrity",
  "numbers": ["XX", "YY", "ZZ"],
  "reasoning": "‡πÄ‡∏•‡∏Ç XX ‡∏à‡∏≤‡∏Å..., ‡πÄ‡∏•‡∏Ç YY ‡∏à‡∏≤‡∏Å..."
}}

‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö: ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÄ‡∏•‡∏Ç‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1-3 ‡∏ï‡∏±‡∏ß ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏∏‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÉ‡∏ô‡∏Ç‡πà‡∏≤‡∏ß
"""
        
        try:
            response = model.generate_content(prompt)
            result_text = response.text.strip()
            
            print(f"   üìù Raw Response: {result_text[:100]}...")
            
            # ‡∏•‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á JSON
            import json
            try:
                # ‡∏•‡∏ö markdown formatting ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
                if result_text.startswith('```json'):
                    result_text = result_text[7:]
                if result_text.endswith('```'):
                    result_text = result_text[:-3]
                result_text = result_text.strip()
                
                result = json.loads(result_text)
                
                if result.get('is_relevant') and result.get('numbers'):
                    numbers = result['numbers']
                    all_numbers.extend(numbers)
                    
                    print(f"   ‚úÖ ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ: {', '.join(numbers)}")
                    print(f"   üìÇ ‡∏´‡∏°‡∏ß‡∏î: {result.get('category', 'other')}")
                    print(f"   üí° ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: {result.get('reasoning', '')[:80]}...")
                else:
                    print(f"   ‚ö†Ô∏è ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏•‡∏Ç")
                    
            except json.JSONDecodeError as e:
                print(f"   ‚ùå JSON Error: {e}")
                print(f"   üìÑ Response: {result_text}")
                
        except Exception as e:
            if "quota" in str(e).lower():
                print(f"   ‚ùå API Quota ‡∏´‡∏°‡∏î: {e}")
                break
            else:
                print(f"   ‚ùå Error: {e}")
        
        print()
        
        # ‡∏û‡∏±‡∏Å‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ hit rate limit
        import time
        time.sleep(1)
    
    # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    if all_numbers:
        unique_numbers = list(dict.fromkeys(all_numbers))[:10]  # ‡πÄ‡∏≠‡∏≤ 10 ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å
        
        print("üéØ ‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î‡∏à‡∏≤‡∏Å Gemini Flash Lite:")
        print("=" * 40)
        print(f"üé≤ {', '.join(unique_numbers)}")
    else:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
    
    print()
    print("‚úÖ ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢ Gemini Flash Lite ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")

if __name__ == "__main__":
    analyze_with_gemini_lite()