"""
р╣Ар╕Хр╕гр╕╡р╕вр╕бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕кр╕│р╕лр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╕Эр╕╢р╕Бр╕кр╕нр╕Щр╣Вр╕бр╣Ар╕Фр╕е ML
Data Preparation for ML Model Training
"""
import os
import sys
import django
from typing import List, Dict, Any
import json

# Setup Django
sys.path.append(os.path.join(os.path.dirname(os.path.dirname(__file__)), 'app'))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'lekdedai.settings')
django.setup()

from dreams.models import DreamKeyword, DreamInterpretation, DreamCategory

class DreamDataPreparator:
    """р╕Др╕ер╕▓р╕кр╕кр╕│р╕лр╕гр╕▒р╕Ър╣Ар╕Хр╕гр╕╡р╕вр╕бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Др╕зр╕▓р╕бр╕Эр╕▒р╕Щ"""
    
    def __init__(self):
        self.data_sources = {
            'keywords': self._load_keyword_data,
            'interpretations': self._load_interpretation_data,
            'synthetic': self._generate_synthetic_data
        }
    
    def _load_keyword_data(self) -> List[Dict]:
        """р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ир╕▓р╕Бр╕Хр╕▓р╕гр╕▓р╕З DreamKeyword"""
        data = []
        
        for keyword in DreamKeyword.objects.all():
            # Create training samples from keywords
            sample = {
                'dream_text': f"р╕Эр╕▒р╕Щр╣Ар╕лр╣Зр╕Щ{keyword.keyword}",
                'main_number': int(keyword.main_number),
                'secondary_number': int(keyword.secondary_number),
                'combinations': keyword.get_numbers_list(),
                'category': keyword.category.name,
                'source': 'keyword_db'
            }
            data.append(sample)
            
            # Generate variations
            variations = [
                f"р╕Эр╕▒р╕Щр╕зр╣Ир╕▓{keyword.keyword}р╕бр╕▓р╕лр╕▓р╕Йр╕▒р╕Щ",
                f"р╣Ар╕лр╣Зр╕Щ{keyword.keyword}р╣Гр╕лр╕Нр╣Ир╕бр╕▓р╕Б",
                f"р╕Эр╕▒р╕Щр╣Ар╕ер╣Ир╕Щр╕Бр╕▒р╕Ъ{keyword.keyword}",
                f"р╕Эр╕▒р╕Щр╕Бр╕ер╕▒р╕з{keyword.keyword}",
                f"р╕Эр╕▒р╕Щ{keyword.keyword}р╕кр╕╡р╕кр╕зр╕в"
            ]
            
            for variation in variations[:2]:  # р╕Ир╕│р╕Бр╕▒р╕Фр╣Бр╕Др╣И 2 р╕гр╕╣р╕Ыр╣Бр╕Ър╕Ъ
                var_sample = sample.copy()
                var_sample['dream_text'] = variation
                var_sample['source'] = 'keyword_variation'
                data.append(var_sample)
        
        return data
    
    def _load_interpretation_data(self) -> List[Dict]:
        """р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ир╕▓р╕Бр╕Бр╕▓р╕гр╕Хр╕╡р╕Др╕зр╕▓р╕бр╕Ир╕гр╕┤р╕З"""
        data = []
        
        for interp in DreamInterpretation.objects.all():
            if interp.suggested_numbers:
                # Parse suggested numbers
                numbers = [n.strip() for n in interp.suggested_numbers.split(',')]
                
                # Estimate main/secondary from first number
                if numbers and len(numbers[0]) >= 2:
                    first_num = numbers[0]
                    main_num = int(first_num[0]) if first_num[0].isdigit() else 1
                    secondary_num = int(first_num[1]) if len(first_num) > 1 and first_num[1].isdigit() else 0
                else:
                    main_num = 1
                    secondary_num = 0
                
                sample = {
                    'dream_text': interp.dream_text,
                    'main_number': main_num,
                    'secondary_number': secondary_num,
                    'combinations': numbers[:6],  # р╣Ар╕нр╕▓р╣Бр╕Др╣И 6 р╣Ар╕ер╕Вр╣Бр╕гр╕Б
                    'category': 'user_interpretation',
                    'source': 'real_interpretation'
                }
                data.append(sample)
        
        return data
    
    def _generate_synthetic_data(self) -> List[Dict]:
        """р╕кр╕гр╣Йр╕▓р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕кр╕▒р╕Зр╣Ар╕Др╕гр╕▓р╕░р╕лр╣М"""
        synthetic_templates = [
            # Animals
            ("р╕Эр╕▒р╕Щр╣Ар╕лр╣Зр╕Щ{animal}р╣Гр╕лр╕Нр╣Ир╕кр╕╡{color}", {'animals': ['р╕Зр╕╣', 'р╕Кр╣Йр╕▓р╕З', 'р╣Ар╕кр╕╖р╕н', 'р╕лр╕бр╕╣', 'р╣Др╕Бр╣И'], 'colors': ['р╣Бр╕Фр╕З', 'р╣Ар╕Вр╕╡р╕вр╕з', 'р╕Вр╕▓р╕з', 'р╕Фр╕│']}),
            ("р╕Эр╕▒р╕Щр╕зр╣Ир╕▓{animal}р╕бр╕▓{action}р╕Йр╕▒р╕Щ", {'animals': ['р╕Зр╕╣', 'р╕Кр╣Йр╕▓р╕З', 'р╕лр╕бр╕▓', 'р╣Бр╕бр╕з'], 'actions': ['р╕Бр╕▒р╕Ф', 'р╣Др╕ер╣И', 'р╣Ар╕ер╣Ир╕Щр╕Бр╕▒р╕Ъ', 'р╕Хр╕▓р╕б']}),
            
            # People  
            ("р╕Эр╕▒р╕Щр╣Ар╕лр╣Зр╕Щ{person}р╣Гр╕лр╣Й{object}", {'people': ['р╕Юр╕гр╕░', 'р╣Ар╕Ур╕г', 'р╣Бр╕бр╣И', 'р╕Юр╣Ир╕н'], 'objects': ['р╣Ар╕Зр╕┤р╕Щ', 'р╕Чр╕нр╕З', 'р╕Вр╕Щр╕б', 'р╕Фр╕нр╕Бр╣Др╕бр╣Й']}),
            ("р╕Эр╕▒р╕Щр╕зр╣Ир╕▓{person}{emotion}р╕бр╕▓р╕Б", {'people': ['р╣Ар╕Фр╣Зр╕Б', 'р╕Др╕Щр╣Бр╕Бр╣И', 'р╕Ьр╕╣р╣Йр╕лр╕Нр╕┤р╕З'], 'emotions': ['р╕Фр╕╡р╣Гр╕И', 'р╣Ар╕ир╕гр╣Йр╕▓', 'р╣Вр╕Бр╕гр╕Ш']}),
            
            # Objects/Places
            ("р╕Эр╕▒р╕Щр╣Др╕Ыр╕Чр╕╡р╣И{place}р╣Ар╕лр╣Зр╕Щ{object}", {'places': ['р╕зр╕▒р╕Ф', 'р╣Вр╕Ър╕кр╕Цр╣М', 'р╕Ыр╣Ир╕▓', 'р╕Чр╕░р╣Ар╕е'], 'objects': ['р╕Чр╕нр╕З', 'р╣Ар╕Зр╕┤р╕Щ', 'р╕гр╕Ц', 'р╕Ър╣Йр╕▓р╕Щ']}),
            ("р╕Эр╕▒р╕Щр╕зр╣Ир╕▓{object}р╕лр╕▓р╕в", {'objects': ['р╣Ар╕Зр╕┤р╕Щ', 'р╕гр╕Ц', 'р╕Чр╕нр╕З', 'р╣Бр╕лр╕зр╕Щ']}),
            
            # Actions
            ("р╕Эр╕▒р╕Щр╕зр╣Ир╕▓р╕Йр╕▒р╕Щ{action}р╣Гр╕Щ{place}", {'actions': ['р╕Ър╕┤р╕Щ', 'р╕зр╕┤р╣Ир╕З', 'р╕зр╣Ир╕▓р╕в', 'р╣Ар╕Фр╕┤р╕Щ'], 'places': ['р╕Щр╣Йр╕│', 'р╕Яр╣Йр╕▓', 'р╕Ыр╣Ир╕▓', 'р╕зр╕▒р╕Ф']})
        ]
        
        # Number mappings for synthetic data
        element_numbers = {
            # Animals
            'р╕Зр╕╣': (5, 6, ['56', '89', '08']),
            'р╕Кр╣Йр╕▓р╕З': (9, 1, ['91', '19', '01']),
            'р╣Ар╕кр╕╖р╕н': (3, 4, ['34', '43', '03']),
            'р╕лр╕бр╕╣': (2, 7, ['27', '72', '02']),
            'р╣Др╕Бр╣И': (1, 8, ['18', '81', '01']),
            'р╕лр╕бр╕▓': (4, 5, ['45', '54', '04']),
            'р╣Бр╕бр╕з': (6, 7, ['67', '76', '06']),
            
            # People
            'р╕Юр╕гр╕░': (8, 9, ['89', '98', '08']),
            'р╣Ар╕Ур╕г': (9, 0, ['90', '09', '99']),
            'р╣Бр╕бр╣И': (2, 8, ['28', '82', '22']),
            'р╕Юр╣Ир╕н': (1, 9, ['19', '91', '11']),
            'р╣Ар╕Фр╣Зр╕Б': (1, 3, ['13', '31', '11']),
            
            # Objects
            'р╣Ар╕Зр╕┤р╕Щ': (8, 2, ['82', '28', '88']),
            'р╕Чр╕нр╕З': (9, 8, ['98', '89', '99']),
            'р╕гр╕Ц': (4, 0, ['40', '04', '44']),
            'р╕Ър╣Йр╕▓р╕Щ': (6, 8, ['68', '86', '66']),
            
            # Colors
            'р╣Бр╕Фр╕З': (3, 0, ['30', '03', '33']),
            'р╣Ар╕Вр╕╡р╕вр╕з': (5, 0, ['50', '05', '55']),
            'р╕Вр╕▓р╕з': (0, 8, ['08', '80', '00']),
            'р╕Фр╕│': (0, 0, ['00', '90', '99'])
        }
        
        data = []
        
        for template, variables in synthetic_templates:
            # Generate combinations
            for i in range(10):  # р╕кр╕гр╣Йр╕▓р╕З 10 р╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕Зр╕Хр╣Ир╕н template
                dream_text = template
                main_nums = []
                secondary_nums = []
                all_combinations = []
                
                # Fill template with random elements
                for var_type, options in variables.items():
                    import random
                    chosen = random.choice(options)
                    dream_text = dream_text.replace(f'{{{var_type[:-1]}}}', chosen)  # Remove 's' for singular
                    
                    # Get numbers for this element
                    if chosen in element_numbers:
                        main, secondary, combinations = element_numbers[chosen]
                        main_nums.append(main)
                        secondary_nums.append(secondary)
                        all_combinations.extend(combinations)
                
                # Calculate final numbers
                if main_nums:
                    final_main = max(set(main_nums), key=main_nums.count)  # Most frequent
                    final_secondary = max(set(secondary_nums), key=secondary_nums.count)
                    final_combinations = list(dict.fromkeys(all_combinations))[:6]  # Remove duplicates
                else:
                    final_main = 1
                    final_secondary = 0
                    final_combinations = ['10', '01', '11']
                
                sample = {
                    'dream_text': dream_text,
                    'main_number': final_main,
                    'secondary_number': final_secondary,
                    'combinations': final_combinations,
                    'category': 'synthetic',
                    'source': 'generated'
                }
                data.append(sample)
        
        return data
    
    def prepare_training_data(self, include_sources: List[str] = None) -> List[Dict]:
        """р╣Ар╕Хр╕гр╕╡р╕вр╕бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕кр╕│р╕лр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╕Эр╕╢р╕Бр╕кр╕нр╕Щ"""
        if include_sources is None:
            include_sources = ['keywords', 'interpretations', 'synthetic']
        
        all_data = []
        
        for source in include_sources:
            if source in self.data_sources:
                print(f"ЁЯУе р╕Бр╕│р╕ер╕▒р╕Зр╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ир╕▓р╕Б {source}...")
                source_data = self.data_sources[source]()
                all_data.extend(source_data)
                print(f"тЬЕ р╣Вр╕лр╕ер╕Фр╣Бр╕ер╣Йр╕з {len(source_data)} р╕гр╕▓р╕вр╕Бр╕▓р╕г")
        
        print(f"ЁЯУК р╕гр╕зр╕бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф: {len(all_data)} р╕гр╕▓р╕вр╕Бр╕▓р╕г")
        return all_data
    
    def save_training_data(self, data: List[Dict], filepath: str):
        """р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Бр╕▓р╕гр╕Эр╕╢р╕Бр╕кр╕нр╕Щ"""
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        print(f"ЁЯТ╛ р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Бр╕ер╣Йр╕з: {filepath}")
    
    def load_training_data(self, filepath: str) -> List[Dict]:
        """р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Бр╕▓р╕гр╕Эр╕╢р╕Бр╕кр╕нр╕Щ"""
        with open(filepath, 'r', encoding='utf-8') as f:
            data = json.load(f)
        print(f"ЁЯУВ р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕бр╕╣р╕е {len(data)} р╕гр╕▓р╕вр╕Бр╕▓р╕гр╕Ир╕▓р╕Б {filepath}")
        return data

# р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕кр╕│р╕лр╕гр╕▒р╕Ър╣Гр╕Кр╣Йр╕Зр╕▓р╕Щр╣Ар╕гр╣Зр╕з
def prepare_and_save_data(output_file: str = 'dream_training_data.json'):
    """р╣Ар╕Хр╕гр╕╡р╕вр╕бр╣Бр╕ер╕░р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕е"""
    preparator = DreamDataPreparator()
    
    # р╣Ар╕Хр╕гр╕╡р╕вр╕бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ир╕▓р╕Бр╕Чр╕╕р╕Бр╣Бр╕лр╕ер╣Ир╕З
    training_data = preparator.prepare_training_data()
    
    # р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕е
    preparator.save_training_data(training_data, output_file)
    
    return training_data

if __name__ == "__main__":
    # р╣Ар╕гр╕╡р╕вр╕Бр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щр╣Вр╕Фр╕вр╕Хр╕гр╕З
    data = prepare_and_save_data()
    print(f"\nЁЯОп р╣Ар╕кр╕гр╣Зр╕Ир╕кр╕┤р╣Йр╕Щ! р╣Ар╕Хр╕гр╕╡р╕вр╕бр╕Вр╣Йр╕нр╕бр╕╣р╕е {len(data)} р╕гр╕▓р╕вр╕Бр╕▓р╕гр╣Бр╕ер╣Йр╕з")
    
    # р╣Бр╕кр╕Фр╕Зр╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕е
    if data:
        print("\nЁЯУЛ р╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕е:")
        for i, sample in enumerate(data[:3]):
            print(f"\n{i+1}. {sample['dream_text']}")
            print(f"   р╣Ар╕ер╕Вр╣Ар╕Фр╣Ир╕Щ: {sample['main_number']}, р╣Ар╕ер╕Вр╕гр╕нр╕З: {sample['secondary_number']}")
            print(f"   р╣Ар╕ер╕Вр╕Ьр╕кр╕б: {', '.join(sample['combinations'][:3])}")