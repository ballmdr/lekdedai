from django.shortcuts import render
from django.db.models import Q, Sum, Avg
from django.utils import timezone
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_http_methods
from datetime import datetime, timedelta
from collections import Counter
import random
import json

# Import models ‡∏à‡∏≤‡∏Å apps ‡∏ï‡πà‡∏≤‡∏á‡πÜ
from news.models import NewsArticle
from ai_engine.models import (
    LuckyNumberPrediction, EnsemblePrediction, 
    PredictionAccuracyTracking, DataIngestionRecord
)
from lottery_checker.models import LottoResult
from lucky_spots.models import LuckyLocation
from utils.lottery_dates import LotteryDates
from .instant_lucky import get_instant_lucky_numbers
from lotto_stats.models import LotteryDraw, NumberStatistics, HotColdNumber

def get_daily_numbers_for_today():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô - ‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏ï‡∏•‡∏≠‡∏î‡∏ß‡∏±‡∏ô"""
    today = timezone.now().date()
    # ‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô seed ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏ï‡∏•‡∏≠‡∏î‡∏ß‡∏±‡∏ô
    random.seed(today.toordinal())
    
    return {
        'daily_seed': today.toordinal()
    }

def get_daily_ritual_content(latest_news, latest_prediction):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô - ‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏ï‡∏•‡∏≠‡∏î‡∏ß‡∏±‡∏ô"""
    
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ seed ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
    today = timezone.now().date()
    random.seed(today.toordinal())
    
    ritual_content = {
        'title': 'üéØ ‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î AI ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô',
        'subtitle': f'‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {today.strftime("%d/%m/%Y")}',
        'primary_message': '‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å‡∏Ç‡πà‡∏≤‡∏ß‡∏î‡∏±‡∏á ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå AI',
        'highlighted_numbers': [],
        'buzz_numbers': [],
        'special_message': '‡πÄ‡∏•‡∏Ç‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô ‡πÄ‡∏ß‡∏•‡∏≤ 00:01 ‡∏ô.'
    }
    
    # ‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å‡∏Ç‡πà‡∏≤‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    news_numbers = []
    if latest_news.exists():
        for article in latest_news[:2]:
            numbers = article.get_extracted_numbers_list()
            news_numbers.extend(numbers[:2])
    
    # ‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å AI prediction
    ai_numbers = []
    if latest_prediction:
        if hasattr(latest_prediction, 'get_top_two_digit_numbers') and latest_prediction.get_top_two_digit_numbers:
            ai_numbers.extend([item.get('number', item) if isinstance(item, dict) else item 
                              for item in latest_prediction.get_top_two_digit_numbers[:3]])
    
    # ‡∏£‡∏ß‡∏°‡πÄ‡∏•‡∏Ç‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏à‡∏≤‡∏Å‡∏Ç‡πà‡∏≤‡∏ß‡πÅ‡∏•‡∏∞ AI)
    all_numbers = news_numbers + ai_numbers
    
    # ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å‡∏Ç‡πà‡∏≤‡∏ß‡πÅ‡∏•‡∏∞ AI ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    ritual_content['highlighted_numbers'] = list(set(all_numbers))[:4]
    ritual_content['buzz_numbers'] = []  # ‡πÄ‡∏≠‡∏≤‡πÄ‡∏•‡∏Ç‡∏™‡∏∏‡πà‡∏°‡∏≠‡∏≠‡∏Å
    
    return ritual_content

def get_next_draw_prediction():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏ß‡∏î‡∏´‡∏ô‡πâ‡∏≤ - ‡∏à‡∏≤‡∏Å‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ + ‡∏Ç‡πà‡∏≤‡∏ß‡πÉ‡∏´‡∏ç‡πà‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏á‡∏ß‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß"""
    
    # ‡∏´‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤
    latest_lotto = LottoResult.objects.filter(is_valid=True).order_by('-draw_date').first()
    
    if latest_lotto:
        last_draw_date = latest_lotto.draw_date
    else:
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏ä‡πâ 2 ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
        last_draw_date = timezone.now().date() - timedelta(days=14)
    
    # Part 1: ‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ - Hot Numbers ‡πÅ‡∏•‡∏∞ Cold Numbers
    statistical_numbers = []
    
    try:
        # ‡πÄ‡∏•‡∏Ç‡∏Æ‡∏≠‡∏ï - ‡∏≠‡∏≠‡∏Å‡∏ö‡πà‡∏≠‡∏¢‡πÉ‡∏ô 90 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        hot_numbers = NumberStatistics.objects.filter(
            number_type='2D',
            total_appearances__gte=3
        ).order_by('-total_appearances')[:6]
        
        for hot_num in hot_numbers:
            statistical_numbers.append({
                'number': hot_num.number,
                'source': 'hot_stats',
                'confidence': min(85, 50 + (hot_num.total_appearances * 5)),
                'reason': f'‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß {hot_num.total_appearances} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
            })
        
        # ‡πÄ‡∏•‡∏Ç‡πÄ‡∏¢‡πá‡∏ô - ‡πÑ‡∏°‡πà‡∏≠‡∏≠‡∏Å‡∏ô‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏≠‡∏≠‡∏Å
        cold_numbers = NumberStatistics.objects.filter(
            number_type='2D',
            days_since_last__gte=30,
            total_appearances__gte=1
        ).order_by('-days_since_last')[:4]
        
        for cold_num in cold_numbers:
            statistical_numbers.append({
                'number': cold_num.number,
                'source': 'cold_stats',
                'confidence': min(75, 40 + (cold_num.days_since_last // 10)),
                'reason': f'‡πÑ‡∏°‡πà‡∏≠‡∏≠‡∏Å {cold_num.days_since_last} ‡∏ß‡∏±‡∏ô'
            })
            
    except Exception:
        # Fallback ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        pass
    
    # Part 2: ‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å‡∏Ç‡πà‡∏≤‡∏ß‡πÉ‡∏´‡∏ç‡πà - ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏á‡∏ß‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏ô‡∏ñ‡∏∂‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    major_news_numbers = []
    
    try:
        # ‡∏Ç‡πà‡∏≤‡∏ß‡πÉ‡∏´‡∏ç‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô >= 80 ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏á‡∏ß‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
        major_news = NewsArticle.objects.filter(
            status='published',
            lottery_relevance_score__gte=80,
            published_date__date__gte=last_draw_date
        ).order_by('-lottery_relevance_score', '-published_date')[:8]
        
        for article in major_news:
            numbers = article.get_extracted_numbers_list()
            for num in numbers[:2]:  # ‡πÄ‡∏≠‡∏≤ 2 ‡πÄ‡∏•‡∏Ç‡πÅ‡∏£‡∏Å‡∏ï‡πà‡∏≠‡∏Ç‡πà‡∏≤‡∏ß
                if len(num) == 2:
                    major_news_numbers.append({
                        'number': num,
                        'source': 'major_news',
                        'confidence': article.lottery_relevance_score,
                        'reason': f'‡∏à‡∏≤‡∏Å‡∏Ç‡πà‡∏≤‡∏ß: {article.title[:30]}...'
                    })
        
    except Exception:
        pass
    
    # ‡∏£‡∏ß‡∏°‡πÄ‡∏•‡∏Ç‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö
    all_prediction_numbers = statistical_numbers + major_news_numbers
    
    # ‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° confidence
    seen_numbers = set()
    unique_numbers = []
    
    for item in sorted(all_prediction_numbers, key=lambda x: x['confidence'], reverse=True):
        if item['number'] not in seen_numbers:
            unique_numbers.append(item)
            seen_numbers.add(item['number'])
        
        if len(unique_numbers) >= 6:  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ó‡∏µ‡πà 6 ‡πÄ‡∏•‡∏Ç
            break
    
    return {
        'prediction_numbers': unique_numbers,
        'data_source_summary': f'‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏≤‡∏Å‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ + ‡∏Ç‡πà‡∏≤‡∏ß‡πÉ‡∏´‡∏ç‡πà‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà {last_draw_date.strftime("%d/%m/%Y")}',
        'last_draw_date': last_draw_date,
        'total_news_analyzed': len(major_news_numbers),
        'statistical_coverage': len(statistical_numbers)
    }

def home(request):
    """‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å - ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å database"""
    
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ß‡∏¢ (‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô >= 70)
    latest_news = NewsArticle.objects.filter(
        status='published',
        lottery_relevance_score__gte=70
    ).select_related('category').order_by('-lottery_relevance_score', '-published_date')[:3]
    
    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πà‡∏≤‡∏ß‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡πà‡∏≤‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
    if not latest_news.exists():
        latest_news = NewsArticle.objects.filter(
            status='published'
        ).select_related('category').order_by('-published_date')[:3]
    
    # ‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î‡πÄ‡∏ä‡πâ‡∏≤‡∏ô‡∏µ‡πâ - ‡∏à‡∏≤‡∏Å‡∏Ç‡πà‡∏≤‡∏ß‡πÉ‡∏ô 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡∏Ç‡∏¢‡∏≤‡∏¢‡πÑ‡∏õ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢‡πÜ)
    morning_numbers = []
    daily_news_sources = []  # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
    hours_back = 24
    max_hours_back = 168  # ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 7 ‡∏ß‡∏±‡∏ô
    
    while not morning_numbers and hours_back <= max_hours_back:
        news_cutoff = timezone.now() - timedelta(hours=hours_back)
        morning_news = NewsArticle.objects.filter(
            status='published',
            published_date__gte=news_cutoff
        ).select_related('category').order_by('-published_date')
        
        # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
        used_articles = []
        for article in morning_news[:6]:  # ‡∏î‡∏π‡∏à‡∏≤‡∏Å 6 ‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            numbers = article.get_extracted_numbers_list()
            if numbers:  # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÄ‡∏•‡∏Ç
                used_articles.append(article)
                morning_numbers.extend(numbers[:2])  # ‡πÄ‡∏≠‡∏≤ 2 ‡πÄ‡∏•‡∏Ç‡πÅ‡∏£‡∏Å‡∏ï‡πà‡∏≠‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°
        
        # ‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏•‡∏Ç 2-3 ‡∏´‡∏•‡∏±‡∏Å ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô (‡∏£‡∏ß‡∏° 195 ‡πÑ‡∏î‡πâ)
        morning_numbers = list(set([num for num in morning_numbers if len(num) in [2, 3]]))[:6]
        
        if morning_numbers:
            daily_news_sources = used_articles  # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏•‡∏Ç
        else:
            hours_back += 24  # ‡∏Ç‡∏¢‡∏≤‡∏¢‡πÑ‡∏õ‡∏≠‡∏µ‡∏Å 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
    
    # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏•‡∏Ç ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡πà‡∏≤‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    if not morning_numbers:
        fallback_news = NewsArticle.objects.filter(
            status='published'
        ).select_related('category').order_by('-published_date')[:10]
        
        used_articles = []
        for article in fallback_news:
            numbers = article.get_extracted_numbers_list()
            if numbers:
                used_articles.append(article)
                morning_numbers.extend(numbers[:2])
        
        # ‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏•‡∏Ç 2-3 ‡∏´‡∏•‡∏±‡∏Å ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô (‡∏£‡∏ß‡∏° 195 ‡πÑ‡∏î‡πâ)
        morning_numbers = list(set([num for num in morning_numbers if len(num) in [2, 3]]))[:6]
        daily_news_sources = used_articles
    
    # AI ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ - ‡∏à‡∏≤‡∏Å EnsemblePrediction ‡∏ó‡∏µ‡πà‡∏°‡∏µ confidence >= 70%
    ai_predictions = EnsemblePrediction.objects.filter(
        session__status__in=['completed', 'locked'],
        overall_confidence__gte=0.70
    ).select_related('session').order_by('-prediction_timestamp')
    
    ai_numbers = []
    for prediction in ai_predictions[:3]:  # ‡∏î‡∏π‡∏à‡∏≤‡∏Å 3 ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        if hasattr(prediction, 'get_top_two_digit_numbers') and prediction.get_top_two_digit_numbers:
            numbers = [item.get('number', item) if isinstance(item, dict) else item 
                      for item in prediction.get_top_two_digit_numbers[:2]]
            ai_numbers.extend(numbers)
    
    # ‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏•‡∏Ç 2-3 ‡∏´‡∏•‡∏±‡∏Å ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô (‡∏£‡∏ß‡∏° 195 ‡πÑ‡∏î‡πâ)
    ai_numbers = list(set([str(num) for num in ai_numbers if str(num).isdigit() and len(str(num)) in [2, 3]]))[:3]
    
    # ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ AI Ensemble ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà)
    latest_prediction = EnsemblePrediction.objects.filter(
        session__status__in=['completed', 'locked']
    ).select_related('session').order_by('-prediction_timestamp').first()
    
    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
    if not latest_prediction:
        old_prediction = LuckyNumberPrediction.objects.filter(
            prediction_date__lte=timezone.now().date()
        ).select_related('ai_model').order_by('-prediction_date', '-created_at').first()
        # ‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö template
        if old_prediction:
            latest_prediction = {
                'is_old_system': True,
                'get_top_three_digit_numbers': [{'number': num} for num in old_prediction.get_three_digit_list()],
                'get_top_two_digit_numbers': [{'number': num} for num in old_prediction.get_two_digit_list()],
                'prediction_summary': old_prediction.prediction_details.get('reasoning', ''),
                'overall_confidence': old_prediction.overall_confidence,
                'session': {'for_draw_date': old_prediction.for_draw_date}
            }
    
    # ‡∏î‡∏∂‡∏á‡∏ú‡∏•‡∏´‡∏ß‡∏¢‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    latest_lottery_result = LottoResult.objects.filter(
        is_valid=True
    ).order_by('-draw_date').first()
    
    # ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏° 4 ‡πÅ‡∏´‡πà‡∏á
    popular_lucky_locations = LuckyLocation.objects.filter(
        is_active=True
    ).select_related('province', 'category').order_by('-views_count')[:4]
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö AI ‡πÉ‡∏´‡∏°‡πà
    total_news = NewsArticle.objects.filter(status='published').count()
    
    # ‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡∏°‡πà
    total_predictions_new = EnsemblePrediction.objects.count()
    total_predictions_old = LuckyNumberPrediction.objects.count()
    total_predictions = total_predictions_new + total_predictions_old
    
    # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà
    accuracy_records = PredictionAccuracyTracking.objects.all()
    if accuracy_records.exists():
        correct_predictions = accuracy_records.filter(two_digit_accuracy=True).count()
        accuracy_percentage = (correct_predictions / accuracy_records.count()) * 100
    else:
        accuracy_percentage = 87  # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    
    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
    today_data_records = DataIngestionRecord.objects.filter(
        ingested_at__date=timezone.now().date()
    ).count()
    
    total_views_today = latest_news.aggregate(
        total_views=Sum('views')
    )['total_views'] or 0
    
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏ß‡∏î‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
    today = timezone.now().date()
    next_draw_date = LotteryDates.get_next_draw_date(today)
    next_draw_info = None
    if next_draw_date:
        next_draw_date_obj = datetime.strptime(next_draw_date, "%Y-%m-%d").date()
        days_until_draw = (next_draw_date_obj - today).days
        next_draw_info = {
            'date': next_draw_date_obj,
            'days_remaining': days_until_draw,
            'formatted_date': next_draw_date_obj.strftime('%d %B %Y')
        }
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á Daily Ritual Content (‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏ï‡∏•‡∏≠‡∏î‡∏ß‡∏±‡∏ô)
    daily_ritual = get_daily_ritual_content(latest_news, latest_prediction)
    
    # üéØ ‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î‡∏´‡∏ß‡∏¢‡∏á‡∏ß‡∏î‡∏´‡∏ô‡πâ‡∏≤ - ‡∏à‡∏≤‡∏Å‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ + ‡∏Ç‡πà‡∏≤‡∏ß‡πÉ‡∏´‡∏ç‡πà
    next_draw_prediction = get_next_draw_prediction()
    
    # ‡∏à‡∏±‡∏î‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° context ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö template
    context = {
        'latest_news': latest_news,
        'latest_prediction': latest_prediction,
        'ai_prediction': latest_prediction,  # ‡πÄ‡∏û‡∏¥‡πà‡∏° alias ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö template ‡πÉ‡∏´‡∏°‡πà
        'latest_lottery_result': latest_lottery_result,
        'popular_lucky_locations': popular_lucky_locations,
        'next_draw_info': next_draw_info,
        'site_stats': {
            'total_visitors_today': total_views_today + 150,  # ‡∏£‡∏ß‡∏° views + estimate
            'accuracy_percentage': int(accuracy_percentage),
            'total_predictions': total_predictions,
            'total_news_today': today_data_records,  # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà AI ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏î‡πâ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
        },
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AI system
        'ai_system_info': {
            'ensemble_predictions': total_predictions_new,
            'data_collected_today': today_data_records,
            'system_status': 'active' if latest_prediction else 'standby',
        },
        'current_date': timezone.now(),
        'thai_current_date': timezone.now().strftime('%d %B %Y'),
        
        # üéØ Daily Ritual Engine (‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏ï‡∏•‡∏≠‡∏î‡∏ß‡∏±‡∏ô)
        'daily_ritual': daily_ritual,
        'current_date_formatted': timezone.now().strftime('%d/%m/%Y'),
        
        # üåÖ ‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î‡πÄ‡∏ä‡πâ‡∏≤‡∏ô‡∏µ‡πâ - ‡∏à‡∏≤‡∏Å‡∏Ç‡πà‡∏≤‡∏ß 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        'morning_news_numbers': morning_numbers,
        'daily_news_sources': daily_news_sources,
        
        # ü§ñ AI ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ - ‡∏à‡∏≤‡∏Å EnsemblePrediction confidence >= 70%
        'ai_prediction_numbers': ai_numbers,
        
        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏ß‡∏î‡∏´‡∏ß‡∏¢
        'target_lottery_date': next_draw_info['formatted_date'] if next_draw_info else '2 ‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô 2025',
        
        # üéØ ‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î‡∏´‡∏ß‡∏¢‡∏á‡∏ß‡∏î‡∏´‡∏ô‡πâ‡∏≤
        'next_draw_prediction': next_draw_prediction,
        'next_draw_numbers': [item['number'] for item in next_draw_prediction['prediction_numbers']],
    }
    
    return render(request, 'home/index.html', context)


@csrf_exempt
@require_http_methods(["GET", "POST"])
def instant_lucky_numbers_api(request):
    """
    API endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Instant Lucky Numbers
    GET: ‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    POST: ‡∏£‡∏±‡∏ö significant_date ‡∏à‡∏≤‡∏Å body
    """
    
    try:
        significant_date = None
        
        selected_news_ids = None
        
        if request.method == "POST":
            try:
                data = json.loads(request.body.decode('utf-8'))
                significant_date = data.get('significant_date')
                selected_news_ids = data.get('selected_news_ids')
            except (json.JSONDecodeError, UnicodeDecodeError):
                # ‡∏ñ‡πâ‡∏≤ JSON ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                pass
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å service function
        result = get_instant_lucky_numbers(significant_date, selected_news_ids)
        
        return JsonResponse({
            'success': True,
            'data': result
        })
        
    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': str(e),
            'message': '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà'
        }, status=500)


@csrf_exempt
@require_http_methods(["GET"])
def get_recent_news_for_selection_api(request):
    """
    API endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    """
    
    try:
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î 24-48 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
        recent_cutoff = timezone.now() - timedelta(hours=48)
        
        # ‡∏Ç‡πà‡∏≤‡∏ß‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏Å‡πà‡∏≠‡∏ô
        high_score_news = NewsArticle.objects.filter(
            status='published',
            lottery_relevance_score__gte=70,
            published_date__gte=recent_cutoff
        ).select_related('category').order_by('-lottery_relevance_score', '-published_date')[:10]
        
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πà‡∏≤‡∏ß‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á ‡πÉ‡∏ä‡πâ‡∏Ç‡πà‡∏≤‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
        if not high_score_news.exists():
            high_score_news = NewsArticle.objects.filter(
                status='published',
                published_date__gte=recent_cutoff
            ).select_related('category').order_by('-published_date')[:8]
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô JSON format
        news_list = []
        for article in high_score_news:
            extracted_nums = article.get_extracted_numbers_list()
            
            news_list.append({
                'id': article.id,
                'title': article.title[:80] + ('...' if len(article.title) > 80 else ''),
                'category': article.category.name if article.category else '‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ',
                'lottery_category': article.get_lottery_category_display() if hasattr(article, 'get_lottery_category_display') else article.lottery_category,
                'lottery_relevance_score': article.lottery_relevance_score,
                'extracted_numbers': extracted_nums[:5],  # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 5 ‡πÄ‡∏•‡∏Ç‡πÅ‡∏£‡∏Å
                'published_date': article.published_date.strftime('%d/%m/%Y %H:%M'),
                'confidence_level': '‡∏™‡∏π‡∏á' if article.lottery_relevance_score >= 90 else '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á' if article.lottery_relevance_score >= 70 else '‡∏û‡∏≠‡πÉ‡∏ä‡πâ'
            })
        
        return JsonResponse({
            'success': True,
            'data': {
                'news_articles': news_list,
                'total_count': len(news_list),
                'time_range': '24-48 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î'
            }
        })
        
    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': str(e),
            'message': '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πà‡∏≤‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà'
        }, status=500)


@csrf_exempt
@require_http_methods(["GET"])
def daily_numbers_status_api(request):
    """
    API endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô
    """
    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πà‡∏≤‡∏ß 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        news_24h_cutoff = timezone.now() - timedelta(hours=24)
        morning_news_count = NewsArticle.objects.filter(
            status='published',
            published_date__gte=news_24h_cutoff
        ).count()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö AI predictions
        ai_predictions_count = EnsemblePrediction.objects.filter(
            session__status__in=['completed', 'locked'],
            overall_confidence__gte=0.70
        ).count()
        
        # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        latest_news = NewsArticle.objects.filter(
            status='published'
        ).order_by('-published_date').first()
        
        latest_prediction = EnsemblePrediction.objects.filter(
            session__status__in=['completed', 'locked']
        ).order_by('-prediction_timestamp').first()
        
        return JsonResponse({
            'success': True,
            'data': {
                'last_update': timezone.now().strftime('%Y-%m-%d %H:%M:%S'),
                'news_24h_count': morning_news_count,
                'ai_predictions_count': ai_predictions_count,
                'latest_news_date': latest_news.published_date.strftime('%Y-%m-%d %H:%M:%S') if latest_news else None,
                'latest_prediction_date': latest_prediction.prediction_timestamp.strftime('%Y-%m-%d %H:%M:%S') if latest_prediction else None,
                'status': 'active' if morning_news_count > 0 or ai_predictions_count > 0 else 'waiting_for_data'
            }
        })
        
    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': str(e),
            'message': '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞'
        }, status=500)