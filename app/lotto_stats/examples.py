#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô lotto_stats ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß
"""

from django.utils import timezone
from datetime import datetime, timedelta
from django.db.models import Q

from .lotto_sync_service import LottoSyncService
from .stats_calculator import StatsCalculator
from .models import LotteryDraw

def example_sync_data():
    """‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å lottery_checker"""
    print("üîÑ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á service
    sync_service = LottoSyncService()
    
    # ‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    status = sync_service.get_sync_status()
    print(f"‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {status}")
    
    # ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î 7 ‡∏ß‡∏±‡∏ô
    result = sync_service.sync_recent_data(days_back=7, force_update=False)
    print(f"‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ã‡∏¥‡∏á‡∏Ñ‡πå: {result}")
    
    # ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞
    specific_date = timezone.now().date() - timedelta(days=1)
    result = sync_service.sync_specific_date(specific_date, force_update=False)
    print(f"‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞: {result}")

def example_calculate_statistics():
    """‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥"""
    print("üìä ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥...")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á calculator
    calculator = StatsCalculator()
    
    # ‡πÄ‡∏•‡∏Ç‡∏Æ‡∏≠‡∏ï 2 ‡∏ï‡∏±‡∏ß
    hot_2d = calculator.get_hot_numbers(limit=10, days=90, number_type='2D')
    print(f"‡πÄ‡∏•‡∏Ç‡∏Æ‡∏≠‡∏ï 2 ‡∏ï‡∏±‡∏ß (90 ‡∏ß‡∏±‡∏ô): {hot_2d[:5]}")
    
    # ‡πÄ‡∏•‡∏Ç‡πÄ‡∏¢‡πá‡∏ô 2 ‡∏ï‡∏±‡∏ß
    cold_2d = calculator.get_cold_numbers(limit=10, number_type='2D')
    print(f"‡πÄ‡∏•‡∏Ç‡πÄ‡∏¢‡πá‡∏ô 2 ‡∏ï‡∏±‡∏ß: {cold_2d[:5]}")
    
    # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    monthly_stats = calculator.get_monthly_statistics()
    print(f"‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô: {list(monthly_stats.keys())[-3:]}")
    
    # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á
    number_stats = calculator.get_number_statistics('12')
    print(f"‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏•‡∏Ç 12: {number_stats}")

def example_query_data():
    """‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
    print("üìã ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...")
    
    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 10 ‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    recent_draws = LotteryDraw.objects.all()[:10]
    print(f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 10 ‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {recent_draws.count()} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    
    for draw in recent_draws[:3]:  # ‡πÅ‡∏™‡∏î‡∏á 3 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å
        print(f"  {draw.draw_date}: {draw.first_prize} | 2‡∏ï‡∏±‡∏ß: {draw.two_digit}")
    
    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
    cutoff_date = timezone.now().date() - timedelta(days=30)
    monthly_draws = LotteryDraw.objects.filter(draw_date__gte=cutoff_date)
    print(f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 30 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {monthly_draws.count()} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    
    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡πÄ‡∏•‡∏Ç
    draws_with_12 = LotteryDraw.objects.filter(
        Q(two_digit='12') | Q(first_prize__contains='12')
    ).order_by('-draw_date')
    print(f"‡∏á‡∏ß‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏•‡∏Ç 12: {draws_with_12.count()} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")

def example_full_workflow():
    """‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ß‡∏á‡∏à‡∏£"""
    print("üöÄ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ß‡∏á‡∏à‡∏£...")
    
    # 1. ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    sync_service = LottoSyncService()
    sync_result = sync_service.sync_recent_data(days_back=30, force_update=False)
    print(f"1. ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {sync_result['success']}")
    
    if sync_result['success']:
        # 2. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        calculator = StatsCalculator()
        
        # ‡πÄ‡∏•‡∏Ç‡∏Æ‡∏≠‡∏ï/‡πÄ‡∏¢‡πá‡∏ô
        hot_numbers = calculator.get_hot_numbers(limit=5, days=90)
        cold_numbers = calculator.get_cold_numbers(limit=5)
        
        print(f"2. ‡πÄ‡∏•‡∏Ç‡∏Æ‡∏≠‡∏ï: {[num['number'] for num in hot_numbers]}")
        print(f"   ‡πÄ‡∏•‡∏Ç‡πÄ‡∏¢‡πá‡∏ô: {[num['number'] for num in cold_numbers]}")
        
        # 3. ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏£‡∏∏‡∏õ
        summary = calculator.get_statistics_summary()
        if summary:
            print(f"3. ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥: {summary['total_draws']} ‡∏á‡∏ß‡∏î")
            print(f"   ‡πÄ‡∏•‡∏Ç 2 ‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏ö‡πà‡∏≠‡∏¢: {summary['most_common_all_time']['2d']['number']}")
        
        # 4. ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        latest_draws = LotteryDraw.objects.order_by('-draw_date')[:5]
        print(f"4. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:")
        for draw in latest_draws:
            print(f"   {draw.draw_date}: {draw.first_prize}")

def example_api_usage():
    """‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ú‡πà‡∏≤‡∏ô API"""
    print("üåê ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ú‡πà‡∏≤‡∏ô API...")
    
    print("""
    # ‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ã‡∏¥‡∏á‡∏Ñ‡πå
    GET /lotto_stats/api/sync/status/
    
    # ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    POST /lotto_stats/api/sync/data/
    {
        "days_back": 7,
        "force_update": false
    }
    
    # ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞
    POST /lotto_stats/api/sync/date/
    {
        "date": "2025-01-15",
        "force_update": false
    }
    
    # ‡πÄ‡∏•‡∏Ç‡∏Æ‡∏≠‡∏ï/‡πÄ‡∏¢‡πá‡∏ô
    GET /lotto_stats/api/hot-cold/?days=90&limit=10
    
    # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á
    GET /lotto_stats/api/number/123/
    """)

if __name__ == "__main__":
    print("üéØ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô lotto_stats ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß")
    print("=" * 50)
    
    try:
        # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        example_sync_data()
        print()
        
        # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        example_calculate_statistics()
        print()
        
        # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        example_query_data()
        print()
        
        # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ß‡∏á‡∏à‡∏£
        example_full_workflow()
        print()
        
        # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ú‡πà‡∏≤‡∏ô API
        example_api_usage()
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
    
    print("\n‚úÖ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
