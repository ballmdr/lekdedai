from django.core.management.base import BaseCommand
from django.utils import timezone
from datetime import datetime, timedelta
import logging

from lottery_checker.lotto_service import LottoService

logger = logging.getLogger(__name__)

class Command(BaseCommand):
    help = 'р╕ер╣Йр╕▓р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕лр╕зр╕вр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Фр╣Бр╕ер╕░р╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Гр╕лр╕бр╣Ир╕Ир╕▓р╕Б API'
    
    def add_arguments(self, parser):
        parser.add_argument(
            '--days-back',
            type=int,
            default=30,
            help='р╕Ир╕│р╕Щр╕зр╕Щр╕зр╕▒р╕Щр╕Чр╕╡р╣Ир╕вр╣Йр╕нр╕Щр╕лр╕ер╕▒р╕З (р╕Др╣Ир╕▓р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щ: 30)',
        )
        parser.add_argument(
            '--force',
            action='store_true',
            help='р╕Ър╕▒р╕Зр╕Др╕▒р╕Ър╕ер╣Йр╕▓р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Вр╕Фр╕вр╣Др╕бр╣Ир╕Цр╕▓р╕бр╕вр╕╖р╕Щр╕вр╕▒р╕Щ',
        )
    
    def handle(self, *args, **options):
        days_back = options['days_back']
        force = options['force']
        
        service = LottoService()
        
        if not force:
            confirm = input(f'р╕Др╕╕р╕Ур╣Бр╕Щр╣Ир╣Гр╕Ир╕лр╕гр╕╖р╕нр╣Др╕бр╣Ир╕Чр╕╡р╣Ир╕Ир╕░р╕ер╣Йр╕▓р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕лр╕зр╕вр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Фр╣Бр╕ер╕░р╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Гр╕лр╕бр╣И {days_back} р╕зр╕▒р╕Щ? (y/N): ')
            if confirm.lower() != 'y':
                self.stdout.write('р╕вр╕Бр╣Ар╕ер╕┤р╕Бр╕Бр╕▓р╕гр╕Фр╕│р╣Ар╕Щр╕┤р╕Щр╕Бр╕▓р╕г')
                return
        
        # р╕ер╣Йр╕▓р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф
        self.stdout.write('ЁЯЧСя╕П  р╕Бр╕│р╕ер╕▒р╕Зр╕ер╣Йр╕▓р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕лр╕зр╕вр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф...')
        if service.clear_all_data():
            self.stdout.write(
                self.style.SUCCESS('тЬЕ р╕ер╣Йр╕▓р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕лр╕зр╕вр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Фр╕кр╕│р╣Ар╕гр╣Зр╕И')
            )
        else:
            self.stdout.write(
                self.style.ERROR('тЭМ р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕ер╣Йр╕▓р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Др╕Фр╣Й')
            )
            return
        
        # р╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Гр╕лр╕бр╣И
        self.stdout.write(f'ЁЯМР р╕Бр╕│р╕ер╕▒р╕Зр╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕лр╕зр╕в {days_back} р╕зр╕▒р╕Щр╕ер╣Ир╕▓р╕кр╕╕р╕Фр╕Ир╕▓р╕Б API...')
        
        today = timezone.now().date()
        success_count = 0
        error_count = 0
        
        for i in range(days_back):
            target_date = today - timedelta(days=i)
            date = target_date.day
            month = target_date.month
            year = target_date.year
            
            self.stdout.write(f'ЁЯУЕ р╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕зр╕▒р╕Щр╕Чр╕╡р╣И {date:02d}/{month:02d}/{year}...')
            
            result = service.get_or_fetch_result(date, month, year)
            
            if result['success']:
                success_count += 1
                source = result['source']
                self.stdout.write(f'   тЬЕ р╕кр╕│р╣Ар╕гр╣Зр╕И ({source})')
            else:
                error_count += 1
                self.stdout.write(f'   тЭМ р╕ер╣Йр╕бр╣Ар╕лр╕ер╕з: {result["error"]}')
        
        # р╕кр╕гр╕╕р╕Ыр╕Ьр╕е
        self.stdout.write('\n' + '=' * 50)
        self.stdout.write('ЁЯУК р╕кр╕гр╕╕р╕Ыр╕Ьр╕ер╕Бр╕▓р╕гр╕Фр╕│р╣Ар╕Щр╕┤р╕Щр╕Бр╕▓р╕г')
        self.stdout.write('=' * 50)
        self.stdout.write(f'тЬЕ р╕кр╕│р╣Ар╕гр╣Зр╕И: {success_count} р╕зр╕▒р╕Щ')
        self.stdout.write(f'тЭМ р╕ер╣Йр╕бр╣Ар╕лр╕ер╕з: {error_count} р╕зр╕▒р╕Щ')
        self.stdout.write(f'ЁЯУЕ р╕гр╕зр╕б: {days_back} р╕зр╕▒р╕Щ')
        
        if success_count > 0:
            self.stdout.write(
                self.style.SUCCESS(f'\nЁЯОЙ р╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕лр╕зр╕вр╕кр╕│р╣Ар╕гр╣Зр╕И {success_count} р╕зр╕▒р╕Щ')
            )
        else:
            self.stdout.write(
                self.style.WARNING('\nтЪая╕П  р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕лр╕зр╕вр╣Др╕Фр╣Й')
            )
