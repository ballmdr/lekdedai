from django.shortcuts import render
from django.db.models import Q, Sum, Avg
from django.utils import timezone
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_http_methods
from datetime import datetime, timedelta
from collections import Counter
import random
import json

# Import models ‡∏à‡∏≤‡∏Å apps ‡∏ï‡πà‡∏≤‡∏á‡πÜ
from news.models import NewsArticle
from ai_engine.models import (
    LuckyNumberPrediction, EnsemblePrediction, 
    PredictionAccuracyTracking, DataIngestionRecord
)
from lottery_checker.models import LottoResult
from lucky_spots.models import LuckyLocation
from utils.lottery_dates import LotteryDates
from .instant_lucky import get_instant_lucky_numbers

def get_daily_numbers_for_today():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô - ‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏ï‡∏•‡∏≠‡∏î‡∏ß‡∏±‡∏ô"""
    today = timezone.now().date()
    # ‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô seed ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏ï‡∏•‡∏≠‡∏î‡∏ß‡∏±‡∏ô
    random.seed(today.toordinal())
    
    return {
        'daily_seed': today.toordinal()
    }

def get_daily_ritual_content(latest_news, latest_prediction):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô - ‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏ï‡∏•‡∏≠‡∏î‡∏ß‡∏±‡∏ô"""
    
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ seed ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
    today = timezone.now().date()
    random.seed(today.toordinal())
    
    ritual_content = {
        'title': 'üéØ ‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î AI ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô',
        'subtitle': f'‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {today.strftime("%d/%m/%Y")}',
        'primary_message': '‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å‡∏Ç‡πà‡∏≤‡∏ß‡∏î‡∏±‡∏á ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå AI',
        'highlighted_numbers': [],
        'buzz_numbers': [],
        'special_message': '‡πÄ‡∏•‡∏Ç‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô ‡πÄ‡∏ß‡∏•‡∏≤ 00:01 ‡∏ô.'
    }
    
    # ‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å‡∏Ç‡πà‡∏≤‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    news_numbers = []
    if latest_news.exists():
        for article in latest_news[:2]:
            numbers = article.get_extracted_numbers_list()
            news_numbers.extend(numbers[:2])
    
    # ‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å AI prediction
    ai_numbers = []
    if latest_prediction:
        if hasattr(latest_prediction, 'get_top_two_digit_numbers') and latest_prediction.get_top_two_digit_numbers:
            ai_numbers.extend([item.get('number', item) if isinstance(item, dict) else item 
                              for item in latest_prediction.get_top_two_digit_numbers[:3]])
    
    # ‡∏£‡∏ß‡∏°‡πÄ‡∏•‡∏Ç‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏à‡∏≤‡∏Å‡∏Ç‡πà‡∏≤‡∏ß‡πÅ‡∏•‡∏∞ AI)
    all_numbers = news_numbers + ai_numbers
    
    # ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å‡∏Ç‡πà‡∏≤‡∏ß‡πÅ‡∏•‡∏∞ AI ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    ritual_content['highlighted_numbers'] = list(set(all_numbers))[:4]
    ritual_content['buzz_numbers'] = []  # ‡πÄ‡∏≠‡∏≤‡πÄ‡∏•‡∏Ç‡∏™‡∏∏‡πà‡∏°‡∏≠‡∏≠‡∏Å
    
    return ritual_content

def home(request):
    """‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å - ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å database"""
    
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ß‡∏¢ (‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô >= 70)
    latest_news = NewsArticle.objects.filter(
        status='published',
        lottery_relevance_score__gte=70
    ).select_related('category').order_by('-lottery_relevance_score', '-published_date')[:3]
    
    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πà‡∏≤‡∏ß‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡πà‡∏≤‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
    if not latest_news.exists():
        latest_news = NewsArticle.objects.filter(
            status='published'
        ).select_related('category').order_by('-published_date')[:3]
    
    # ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ AI Ensemble ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà)
    latest_prediction = EnsemblePrediction.objects.filter(
        session__status__in=['completed', 'locked']
    ).select_related('session').order_by('-prediction_timestamp').first()
    
    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
    if not latest_prediction:
        old_prediction = LuckyNumberPrediction.objects.filter(
            prediction_date__lte=timezone.now().date()
        ).select_related('ai_model').order_by('-prediction_date', '-created_at').first()
        # ‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö template
        if old_prediction:
            latest_prediction = {
                'is_old_system': True,
                'get_top_three_digit_numbers': [{'number': num} for num in old_prediction.get_three_digit_list()],
                'get_top_two_digit_numbers': [{'number': num} for num in old_prediction.get_two_digit_list()],
                'prediction_summary': old_prediction.prediction_details.get('reasoning', ''),
                'overall_confidence': old_prediction.overall_confidence,
                'session': {'for_draw_date': old_prediction.for_draw_date}
            }
    
    # ‡∏î‡∏∂‡∏á‡∏ú‡∏•‡∏´‡∏ß‡∏¢‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    latest_lottery_result = LottoResult.objects.filter(
        is_valid=True
    ).order_by('-draw_date').first()
    
    # ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏° 4 ‡πÅ‡∏´‡πà‡∏á
    popular_lucky_locations = LuckyLocation.objects.filter(
        is_active=True
    ).select_related('province', 'category').order_by('-views_count')[:4]
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö AI ‡πÉ‡∏´‡∏°‡πà
    total_news = NewsArticle.objects.filter(status='published').count()
    
    # ‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡∏°‡πà
    total_predictions_new = EnsemblePrediction.objects.count()
    total_predictions_old = LuckyNumberPrediction.objects.count()
    total_predictions = total_predictions_new + total_predictions_old
    
    # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà
    accuracy_records = PredictionAccuracyTracking.objects.all()
    if accuracy_records.exists():
        correct_predictions = accuracy_records.filter(two_digit_accuracy=True).count()
        accuracy_percentage = (correct_predictions / accuracy_records.count()) * 100
    else:
        accuracy_percentage = 87  # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    
    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
    today_data_records = DataIngestionRecord.objects.filter(
        ingested_at__date=timezone.now().date()
    ).count()
    
    total_views_today = latest_news.aggregate(
        total_views=Sum('views')
    )['total_views'] or 0
    
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏ß‡∏î‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
    today = timezone.now().date()
    next_draw_date = LotteryDates.get_next_draw_date(today)
    next_draw_info = None
    if next_draw_date:
        next_draw_date_obj = datetime.strptime(next_draw_date, "%Y-%m-%d").date()
        days_until_draw = (next_draw_date_obj - today).days
        next_draw_info = {
            'date': next_draw_date_obj,
            'days_remaining': days_until_draw,
            'formatted_date': next_draw_date_obj.strftime('%d %B %Y')
        }
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á Daily Ritual Content (‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏ï‡∏•‡∏≠‡∏î‡∏ß‡∏±‡∏ô)
    daily_ritual = get_daily_ritual_content(latest_news, latest_prediction)
    
    # ‡∏à‡∏±‡∏î‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° context ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö template
    context = {
        'latest_news': latest_news,
        'latest_prediction': latest_prediction,
        'ai_prediction': latest_prediction,  # ‡πÄ‡∏û‡∏¥‡πà‡∏° alias ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö template ‡πÉ‡∏´‡∏°‡πà
        'latest_lottery_result': latest_lottery_result,
        'popular_lucky_locations': popular_lucky_locations,
        'next_draw_info': next_draw_info,
        'site_stats': {
            'total_visitors_today': total_views_today + 150,  # ‡∏£‡∏ß‡∏° views + estimate
            'accuracy_percentage': int(accuracy_percentage),
            'total_predictions': total_predictions,
            'total_news_today': today_data_records,  # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà AI ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏î‡πâ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
        },
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AI system
        'ai_system_info': {
            'ensemble_predictions': total_predictions_new,
            'data_collected_today': today_data_records,
            'system_status': 'active' if latest_prediction else 'standby',
        },
        'current_date': timezone.now(),
        'thai_current_date': timezone.now().strftime('%d %B %Y'),
        
        # üéØ Daily Ritual Engine (‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏ï‡∏•‡∏≠‡∏î‡∏ß‡∏±‡∏ô)
        'daily_ritual': daily_ritual,
        'current_date_formatted': timezone.now().strftime('%d/%m/%Y'),
    }
    
    return render(request, 'home/index.html', context)


@csrf_exempt
@require_http_methods(["GET", "POST"])
def instant_lucky_numbers_api(request):
    """
    API endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Instant Lucky Numbers
    GET: ‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    POST: ‡∏£‡∏±‡∏ö significant_date ‡∏à‡∏≤‡∏Å body
    """
    
    try:
        significant_date = None
        
        selected_news_ids = None
        
        if request.method == "POST":
            try:
                data = json.loads(request.body.decode('utf-8'))
                significant_date = data.get('significant_date')
                selected_news_ids = data.get('selected_news_ids')
            except (json.JSONDecodeError, UnicodeDecodeError):
                # ‡∏ñ‡πâ‡∏≤ JSON ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                pass
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å service function
        result = get_instant_lucky_numbers(significant_date, selected_news_ids)
        
        return JsonResponse({
            'success': True,
            'data': result
        })
        
    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': str(e),
            'message': '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà'
        }, status=500)


@csrf_exempt
@require_http_methods(["GET"])
def get_recent_news_for_selection_api(request):
    """
    API endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    """
    
    try:
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î 24-48 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
        recent_cutoff = timezone.now() - timedelta(hours=48)
        
        # ‡∏Ç‡πà‡∏≤‡∏ß‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏Å‡πà‡∏≠‡∏ô
        high_score_news = NewsArticle.objects.filter(
            status='published',
            lottery_relevance_score__gte=70,
            published_date__gte=recent_cutoff
        ).select_related('category').order_by('-lottery_relevance_score', '-published_date')[:10]
        
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πà‡∏≤‡∏ß‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á ‡πÉ‡∏ä‡πâ‡∏Ç‡πà‡∏≤‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
        if not high_score_news.exists():
            high_score_news = NewsArticle.objects.filter(
                status='published',
                published_date__gte=recent_cutoff
            ).select_related('category').order_by('-published_date')[:8]
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô JSON format
        news_list = []
        for article in high_score_news:
            extracted_nums = article.get_extracted_numbers_list()
            
            news_list.append({
                'id': article.id,
                'title': article.title[:80] + ('...' if len(article.title) > 80 else ''),
                'category': article.category.name if article.category else '‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ',
                'lottery_category': article.get_lottery_category_display() if hasattr(article, 'get_lottery_category_display') else article.lottery_category,
                'lottery_relevance_score': article.lottery_relevance_score,
                'extracted_numbers': extracted_nums[:5],  # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 5 ‡πÄ‡∏•‡∏Ç‡πÅ‡∏£‡∏Å
                'published_date': article.published_date.strftime('%d/%m/%Y %H:%M'),
                'confidence_level': '‡∏™‡∏π‡∏á' if article.lottery_relevance_score >= 90 else '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á' if article.lottery_relevance_score >= 70 else '‡∏û‡∏≠‡πÉ‡∏ä‡πâ'
            })
        
        return JsonResponse({
            'success': True,
            'data': {
                'news_articles': news_list,
                'total_count': len(news_list),
                'time_range': '24-48 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î'
            }
        })
        
    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': str(e),
            'message': '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πà‡∏≤‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà'
        }, status=500)