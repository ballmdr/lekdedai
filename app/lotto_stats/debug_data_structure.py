#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô lottery_checker
"""

import os
import sys
import django

# ‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡∏Ç‡∏≠‡∏á Django project
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'lekdedai.settings')
django.setup()

from lottery_checker.models import LottoResult
from datetime import datetime

def inspect_data_structure():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
    print("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô lottery_checker...")
    
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    all_results = LottoResult.objects.all()
    print(f"üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {all_results.count()}")
    
    if all_results.count() == 0:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô lottery_checker")
        return
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î 5 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
    recent_results = all_results.order_by('-draw_date')[:5]
    
    for i, result in enumerate(recent_results, 1):
        print(f"\nüìÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà {i}: {result.draw_date}")
        print(f"   ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {result.source}")
        print(f"   ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {type(result.result_data)}")
        
        if isinstance(result.result_data, dict):
            print(f"   ‡∏Ñ‡∏µ‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ: {list(result.result_data.keys())}")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏µ‡∏¢‡πå
            for key, value in result.result_data.items():
                print(f"     {key}: {type(value)} = {value}")
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏∂‡∏Å
                if isinstance(value, dict):
                    print(f"       ‡∏Ñ‡∏µ‡∏¢‡πå‡∏¢‡πà‡∏≠‡∏¢: {list(value.keys())}")
                elif isinstance(value, list):
                    print(f"       ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: {len(value)}")
                    if value:
                        print(f"       ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å: {value[0]} (‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: {type(value[0])})")
        else:
            print(f"   ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {result.result_data}")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏û‡∏ö
    print(f"\nüîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...")
    
    # ‡∏´‡∏≤‡∏Ñ‡∏µ‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    key_patterns = {}
    for result in all_results:
        if isinstance(result.result_data, dict):
            for key in result.result_data.keys():
                key_patterns[key] = key_patterns.get(key, 0) + 1
    
    print("‡∏Ñ‡∏µ‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î:")
    for key, count in sorted(key_patterns.items(), key=lambda x: x[1], reverse=True):
        print(f"  {key}: {count} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 1
    first_prize_patterns = {}
    for result in all_results:
        if isinstance(result.result_data, dict):
            first_data = result.result_data.get('first', None)
            if first_data:
                if isinstance(first_data, dict):
                    first_prize_patterns['dict'] = first_prize_patterns.get('dict', 0) + 1
                elif isinstance(first_data, str):
                    first_prize_patterns['string'] = first_prize_patterns.get('string', 0) + 1
                else:
                    first_prize_patterns[str(type(first_data))] = first_prize_patterns.get(str(type(first_data)), 0) + 1
    
    print(f"\n‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 1:")
    for pattern, count in first_prize_patterns.items():
        print(f"  {pattern}: {count} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á")

def test_conversion():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
    print(f"\nüß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...")
    
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
    sample_result = LottoResult.objects.first()
    if not sample_result:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö")
        return
    
    print(f"üìÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: {sample_result.draw_date}")
    print(f"   ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö: {sample_result.result_data}")
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ
    from lotto_stats.lotto_sync_service import LottoSyncService
    
    service = LottoSyncService()
    converted = service._convert_lotto_data(sample_result)
    
    print(f"   ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß: {converted}")

if __name__ == "__main__":
    try:
        inspect_data_structure()
        test_conversion()
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        import traceback
        traceback.print_exc()
