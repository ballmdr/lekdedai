import re
from typing import Dict, List, Tuple

class NewsLotteryScorer:
    """‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î‡∏´‡∏ß‡∏¢"""
    
    def __init__(self):
        """‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô"""
        
        # üî• ‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡πà‡∏≤‡∏ß‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏ (90-100 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô)
        self.accident_keywords = [
            '‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏', '‡∏£‡∏ñ‡∏ä‡∏ô', '‡∏ä‡∏ô‡∏Å‡∏±‡∏ô', '‡∏ä‡∏ô‡∏ó‡πâ‡∏≤‡∏¢', '‡∏£‡∏ñ‡πÄ‡∏™‡∏µ‡∏¢', '‡∏£‡∏ñ‡∏û‡∏±‡∏á',
            '‡πÑ‡∏ü‡πÑ‡∏´‡∏°‡πâ', '‡πÄ‡∏û‡∏•‡∏¥‡∏á‡πÑ‡∏´‡∏°‡πâ', '‡∏•‡∏∏‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü', '‡πÑ‡∏ü‡∏Ñ‡∏•‡∏≠‡∏Å',
            '‡∏à‡∏°‡∏ô‡πâ‡∏≥', '‡∏à‡∏°‡∏ó‡∏∞‡πÄ‡∏•', '‡∏à‡∏°‡πÅ‡∏°‡πà‡∏ô‡πâ‡∏≥', '‡∏à‡∏°‡∏•‡∏á', '‡∏î‡∏¥‡πà‡∏á‡∏•‡∏á',
            '‡∏ï‡∏≤‡∏¢', '‡πÄ‡∏™‡∏µ‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï', '‡∏®‡∏û', '‡∏°‡∏£‡∏ì‡∏Å‡∏£‡∏£‡∏°', '‡πÄ‡∏´‡∏ï‡∏∏‡∏£‡πâ‡∏≤‡∏¢',
            '‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö', '‡πÄ‡∏à‡πá‡∏ö‡∏™‡∏≤‡∏´‡∏±‡∏™', '‡∏£‡∏û.', '‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•',
            '‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡πâ‡∏≤‡∏¢', '‡πÇ‡∏ä‡∏Ñ‡∏£‡πâ‡∏≤‡∏¢', '‡∏ä‡∏¥‡∏á‡∏ä‡∏∞‡∏ï‡∏≤'
        ]
        
        # ‚≠ê ‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡πà‡∏≤‡∏ß‡∏Ñ‡∏ô‡∏î‡∏±‡∏á (80-90 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô)  
        self.celebrity_keywords = [
            '‡∏î‡∏≤‡∏£‡∏≤', '‡∏ô‡∏±‡∏Å‡∏£‡πâ‡∏≠‡∏á', '‡∏ô‡∏±‡∏Å‡πÅ‡∏™‡∏î‡∏á', '‡∏®‡∏¥‡∏•‡∏õ‡∏¥‡∏ô', '‡πÄ‡∏ã‡πÄ‡∏•‡∏ö',
            '‡πÅ‡∏ï‡πà‡∏á‡∏á‡∏≤‡∏ô', '‡∏´‡∏¢‡πà‡∏≤', '‡∏Ñ‡∏•‡∏≠‡∏î‡∏•‡∏π‡∏Å', '‡πÄ‡∏Å‡∏¥‡∏î', '‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î',
            '‡∏≠‡∏≤‡∏¢‡∏∏', '‡∏õ‡∏µ', '‡∏Ç‡∏ß‡∏ö', '‡∏ä‡∏±‡∏ô‡∏©‡∏≤', '‡∏Ñ‡∏£‡∏ö', '‡πÄ‡∏â‡∏•‡∏¥‡∏°‡∏â‡∏•‡∏≠‡∏á',
            '‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•', '‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•', '‡∏ä‡∏ô‡∏∞', '‡πÅ‡∏ä‡∏°‡∏õ‡πå',
            '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å', '‡∏Ñ‡∏ö‡∏Å‡∏±‡∏ô', '‡πÄ‡∏î‡∏ó', '‡∏°‡∏µ‡∏•‡∏π‡∏Å'
        ]
        
        # üìä ‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à (70-80 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô)
        self.economic_keywords = [
            '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏≠‡∏á', '‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥', '‡∏ó‡∏≠‡∏á', '‡∏ö‡∏≤‡∏ó‡∏•‡∏∞', '‡∏ö‡∏≤‡∏ó‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢',
            '‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô', '‡πÄ‡∏ö‡∏ô‡∏ã‡∏¥‡∏ô', '‡∏î‡∏µ‡πÄ‡∏ã‡∏•', '‡πÅ‡∏Å‡πä‡∏™', '‡πÅ‡∏≠‡∏•‡∏û‡∏µ‡∏à‡∏µ',
            '‡∏´‡∏∏‡πâ‡∏ô', '‡∏î‡∏±‡∏ä‡∏ô‡∏µ', 'SET', 'mai', '‡∏ï‡∏•‡∏≤‡∏î‡∏´‡∏∏‡πâ‡∏ô',
            '‡∏î‡∏≠‡∏•‡∏•‡∏≤‡∏£‡πå', '‡∏ö‡∏≤‡∏ó', '‡πÅ‡∏•‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô', '‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÅ‡∏•‡∏Å',
            '‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏ü‡πâ‡∏≠', '‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢', '‡πÄ‡∏á‡∏¥‡∏ô‡∏ù‡∏≤‡∏Å', '‡∏Å‡∏π‡πâ‡πÄ‡∏á‡∏¥‡∏ô',
            '‡∏£‡∏≤‡∏Ñ‡∏≤', '‡∏Ç‡∏∂‡πâ‡∏ô', '‡∏•‡∏á', '‡πÄ‡∏û‡∏¥‡πà‡∏°', '‡∏•‡∏î', '‡∏õ‡∏£‡∏±‡∏ö'
        ]
        
        # üì∞ ‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ (40-60 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô)
        self.general_keywords = [
            '‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡∏≠‡∏á', '‡∏£‡∏±‡∏ê‡∏ö‡∏≤‡∏•', '‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°', '‡∏™‡∏†‡∏≤',
            '‡∏Å‡∏µ‡∏¨‡∏≤', '‡∏ü‡∏∏‡∏ï‡∏ö‡∏≠‡∏•', '‡∏™‡∏Å‡∏≠‡∏£‡πå', '‡πÅ‡∏Ç‡πà‡∏á',
            '‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û', '‡πÇ‡∏Ñ‡∏ß‡∏¥‡∏î', '‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô', '‡∏õ‡πà‡∏ß‡∏¢',
            '‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß', '‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß', '‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°', '‡πÄ‡∏ó‡∏®‡∏Å‡∏≤‡∏•'
        ]
        
        # üåü ‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡πà‡∏≤‡∏ß‡πÅ‡∏õ‡∏•‡∏Å/‡∏°‡∏´‡∏±‡∏®‡∏à‡∏£‡∏£‡∏¢‡πå (95+ ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô)
        self.miracle_keywords = [
            '‡∏õ‡∏£‡∏∞‡∏´‡∏•‡∏≤‡∏î', '‡∏°‡∏´‡∏±‡∏®‡∏à‡∏£‡∏£‡∏¢‡πå', '‡πÅ‡∏õ‡∏•‡∏Å', '‡∏û‡∏¥‡∏™‡∏î‡∏≤‡∏£', '‡∏Æ‡∏∑‡∏≠‡∏Æ‡∏≤',
            '‡∏û‡∏ç‡∏≤‡∏ô‡∏≤‡∏Ñ', '‡∏à‡∏≠‡∏°‡∏õ‡∏•‡∏ß‡∏Å', '‡∏ï‡πâ‡∏ô‡∏Å‡∏•‡πâ‡∏ß‡∏¢', '‡∏Å‡∏•‡πâ‡∏ß‡∏¢', '‡πÄ‡∏´‡πá‡∏î',
            '‡πÄ‡∏ï‡πà‡∏≤‡∏™‡∏µ‡∏ó‡∏≠‡∏á', '‡πÄ‡∏ï‡πà‡∏≤', '‡∏á‡∏π', '‡∏ï‡∏±‡∏ß‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡∏±‡∏ß‡∏ó‡∏≠‡∏á', '‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏™‡∏≠‡∏á‡∏´‡∏±‡∏ß', '5 ‡∏Ç‡∏≤'
        ]
        
        # üîÆ ‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÄ‡∏•‡∏Ç‡∏°‡∏á‡∏Ñ‡∏•/‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠ (92+ ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô)
        self.belief_keywords = [
            '‡∏Ç‡∏±‡∏ô‡∏ô‡πâ‡∏≥‡∏°‡∏ô‡∏ï‡πå', '‡∏ô‡πâ‡∏≥‡∏°‡∏ô‡∏ï‡πå', '‡πÄ‡∏•‡∏Ç‡∏´‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ó‡∏±‡∏î', '‡∏õ‡∏£‡∏∞‡∏ó‡∏±‡∏î', '‡∏ò‡∏π‡∏õ',
            '‡∏´‡∏•‡∏ß‡∏á‡∏û‡πà‡∏≠', '‡πÄ‡∏Å‡∏à‡∏¥', '‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå', '‡πÄ‡∏à‡πâ‡∏≤‡∏≠‡∏≤‡∏ß‡∏≤‡∏™', '‡∏°‡∏£‡∏ì‡∏†‡∏≤‡∏û',
            '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ù‡∏±‡∏ô', '‡∏ù‡∏±‡∏ô‡∏ß‡πà‡∏≤', '‡∏ù‡∏±‡∏ô‡πÄ‡∏´‡πá‡∏ô', '‡∏ô‡∏¥‡∏°‡∏¥‡∏ï',
            '‡∏Ñ‡∏£‡∏ö‡∏£‡∏≠‡∏ö', '‡∏£‡∏≥‡∏•‡∏∂‡∏Å', '‡∏õ‡∏µ‡∏ó‡∏µ‡πà'
        ]
        
        # ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà)
        self.number_patterns = {
            # ‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á)
            'license_plate': r'‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô\s*([‡∏Å-‡∏Æ]{0,3})\s*([0-9]{1,4})|([‡∏Å-‡∏Æ]{2,3})\s*([0-9]{2,4})',
            
            # ‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏µ (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á)
            'age_years': r'‡∏≠‡∏≤‡∏¢‡∏∏\s*([0-9]{1,3})\s*‡∏õ‡∏µ|([0-9]{1,3})\s*‡∏Ç‡∏ß‡∏ö|‡∏à‡∏≥‡∏Ñ‡∏∏‡∏Å\s*([0-9]{1,2})\s*‡∏õ‡∏µ',
            
            # ‡πÄ‡∏ß‡∏•‡∏≤ (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏à‡∏≠ 09.09)
            'time': r'([0-9]{1,2})\.([0-9]{2})\s*‡∏ô\.|([0-9]{1,2}):([0-9]{2})',
            
            # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏®‡∏≤‡∏• ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô
            'court_score': r'‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô\s*([0-9]{1,2})-([0-9]{1,2})|([0-9]{1,2})-([0-9]{1,2})\s*‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô',
            
            # ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏î‡∏µ (‡πÉ‡∏´‡∏°‡πà)
            'case_number': r'‡∏Ñ‡∏î‡∏µ[‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç]*\s*[‡πÅ‡∏î‡∏á‡∏î‡∏≥]*\s*[‡∏ó‡∏µ‡πà]*\s*[‡∏≠‡∏°\.‡∏ö‡∏Ñ\.]*\s*([0-9]{1,3})\/([0-9]{4})|‡∏ä‡∏±‡πâ‡∏ô\s*([0-9]{1,3})',
            
            # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ô‡∏≤‡∏¢‡∏Å‡∏Ø (‡πÉ‡∏´‡∏°‡πà)
            'pm_position': r'‡∏ô‡∏≤‡∏¢‡∏Å[‡∏£‡∏±‡∏ê‡∏°‡∏ô‡∏ï‡∏£‡∏µ]*\s*‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà\s*([0-9]{1,3})|‡∏≠‡∏î‡∏µ‡∏ï‡∏ô‡∏≤‡∏¢‡∏Å[‡∏£‡∏±‡∏ê‡∏°‡∏ô‡∏ï‡∏£‡∏µ]*\s*‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà\s*([0-9]{1,3})',
            
            # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏±‡∏ô/‡∏Ñ‡∏ô/‡∏ä‡∏¥‡πâ‡∏ô
            'quantity': r'([0-9]{1,3})\s*‡∏Ñ‡∏±‡∏ô|([0-9]{1,3})\s*‡∏Ñ‡∏ô|([0-9]{1,3})\s*‡∏ä‡∏¥‡πâ‡∏ô',
            
            # ‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà
            'house_number': r'‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà\s*([0-9]{1,4})|‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà\s*([0-9]{1,4})',
            
            # ‡πÄ‡∏á‡∏¥‡∏ô
            'money': r'([0-9,]+)\s*‡∏ö‡∏≤‡∏ó|([0-9,]+)\s*‡∏•‡πâ‡∏≤‡∏ô|([0-9,]+)\s*‡πÅ‡∏™‡∏ô',
            
            # ‡πÄ‡∏•‡∏Ç‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
            'general_numbers': r'\b([0-9]{2,3})\b'
        }
        
        # üö´ ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ß‡∏¢
        self.excluded_patterns = [
            r'‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà\s*([0-9]{1,2})\s*[\/\-\.]\s*([0-9]{1,2})\s*[\/\-\.]\s*([0-9]{2,4})',  # ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡πà‡∏≤‡∏ß
            r'([0-9]{1,2})\s*[\/\-\.]\s*([0-9]{1,2})\s*[\/\-\.]\s*(25[0-9]{2})',  # ‡∏õ‡∏µ ‡∏û.‡∏®.
            r'([0-9]{1,2})\s*[\/\-\.]\s*([0-9]{1,2})\s*[\/\-\.]\s*(20[0-9]{2})',  # ‡∏õ‡∏µ ‡∏Ñ.‡∏®.
            r'‡∏´‡∏ô‡πâ‡∏≤\s*([0-9]+)',  # ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤
            r'‡∏â‡∏ö‡∏±‡∏ö‡∏ó‡∏µ‡πà\s*([0-9]+)',  # ‡πÄ‡∏•‡∏Ç‡∏â‡∏ö‡∏±‡∏ö
            r'‡∏£‡∏´‡∏±‡∏™\s*([0-9]+)',  # ‡∏£‡∏´‡∏±‡∏™‡∏ï‡πà‡∏≤‡∏á‡πÜ
            r'ID\s*([0-9]+)',  # ‡∏£‡∏´‡∏±‡∏™ ID
            r'‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ô\s*([0-9\.]+)',  # ‡πÄ‡∏•‡∏Ç‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ô
        ]
    
    def score_news_article(self, title: str, content: str) -> Dict:
        """
        ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡πà‡∏≤‡∏ß‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ß‡∏¢
        
        Args:
            title: ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ç‡πà‡∏≤‡∏ß
            content: ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡πà‡∏≤‡∏ß
            
        Returns:
            Dict: {'score': int, 'category': str, 'extracted_numbers': List, 'confidence_details': Dict}
        """
        
        full_text = f"{title} {content}".lower()
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
        category_scores = self._analyze_categories(full_text)
        
        # ‡∏´‡∏≤‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
        best_category, base_score = max(category_scores.items(), key=lambda x: x[1])
        
        # ‡∏™‡∏Å‡∏±‡∏î‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        extracted_numbers = self._extract_important_numbers(full_text, best_category)
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ
        final_score = self._calculate_final_score(base_score, extracted_numbers, best_category)
        
        return {
            'score': final_score,
            'category': best_category,
            'extracted_numbers': extracted_numbers,
            'confidence_details': {
                'category_scores': category_scores,
                'base_score': base_score,
                'number_bonus': len(extracted_numbers) * 5,
                'reasoning': self._get_scoring_reason(best_category, len(extracted_numbers))
            }
        }
    
    def _analyze_categories(self, text: str) -> Dict[str, int]:
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏Ç‡πà‡∏≤‡∏ß‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô"""
        
        scores = {
            'miracle': 0,
            'belief': 0,
            'accident': 0,
            'celebrity': 0, 
            'economic': 0,
            'general': 0
        }
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÅ‡∏õ‡∏•‡∏Å/‡∏°‡∏´‡∏±‡∏®‡∏à‡∏£‡∏£‡∏¢‡πå
        for keyword in self.miracle_keywords:
            if keyword in text:
                scores['miracle'] += 12
                
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÄ‡∏•‡∏Ç‡∏°‡∏á‡∏Ñ‡∏•/‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠
        for keyword in self.belief_keywords:
            if keyword in text:
                scores['belief'] += 12
                
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏
        for keyword in self.accident_keywords:
            if keyword in text:
                scores['accident'] += 10
                
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ñ‡∏ô‡∏î‡∏±‡∏á
        for keyword in self.celebrity_keywords:
            if keyword in text:
                scores['celebrity'] += 8
                
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à
        for keyword in self.economic_keywords:
            if keyword in text:
                scores['economic'] += 7
                
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
        for keyword in self.general_keywords:
            if keyword in text:
                scores['general'] += 5
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏£‡∏¥‡∏á
        final_scores = {}
        if scores['miracle'] > 0:
            final_scores['miracle'] = min(95 + scores['miracle'], 100)
        if scores['belief'] > 0:
            final_scores['belief'] = min(92 + scores['belief'], 100)
        if scores['accident'] > 0:
            final_scores['accident'] = min(90 + scores['accident'], 100)
        if scores['celebrity'] > 0:
            final_scores['celebrity'] = min(80 + scores['celebrity'], 90)
        if scores['economic'] > 0:
            final_scores['economic'] = min(70 + scores['economic'], 80)
        if scores['general'] > 0:
            final_scores['general'] = min(40 + scores['general'], 60)
            
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏î‡πÄ‡∏•‡∏¢ ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
        if not final_scores:
            final_scores['general'] = 30
            
        return final_scores
    
    def _extract_important_numbers(self, text: str, category: str) -> List[Dict]:
        """‡∏™‡∏Å‡∏±‡∏î‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"""
        
        extracted = []
        
        # üö´ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏•‡∏Ç‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        def should_exclude_number(number_text: str, full_text: str) -> bool:
            for excluded_pattern in self.excluded_patterns:
                if re.search(excluded_pattern, full_text):
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏•‡∏Ç‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô pattern ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                    excluded_matches = re.findall(excluded_pattern, full_text)
                    for excluded_match in excluded_matches:
                        if isinstance(excluded_match, tuple):
                            if number_text in excluded_match:
                                return True
                        elif number_text in str(excluded_match):
                            return True
            return False
        
        # ‡∏™‡∏Å‡∏±‡∏î‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ
        for pattern_name, pattern in self.number_patterns.items():
            matches = re.findall(pattern, text)
            
            for match in matches:
                if isinstance(match, tuple):
                    # ‡∏Å‡∏£‡∏ì‡∏µ group ‡πÉ‡∏ôregex
                    for group in match:
                        if group and group.isdigit():
                            # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                            if not should_exclude_number(group, text):
                                number_info = self._process_number(group, pattern_name, category)
                                if number_info:
                                    extracted.append(number_info)
                else:
                    # ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß
                    if match and match.replace(',', '').isdigit():
                        clean_number = match.replace(',', '')
                        if not should_exclude_number(clean_number, text):
                            number_info = self._process_number(clean_number, pattern_name, category)
                            if number_info:
                                extracted.append(number_info)
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        extracted.sort(key=lambda x: x['confidence'], reverse=True)
        
        # ‡∏•‡∏ö‡∏ã‡πâ‡∏≥
        unique_numbers = []
        seen_numbers = set()
        
        for item in extracted:
            if item['number'] not in seen_numbers:
                unique_numbers.append(item)
                seen_numbers.add(item['number'])
                
        return unique_numbers[:10]  # ‡πÄ‡∏≠‡∏≤‡πÅ‡∏Ñ‡πà 10 ‡πÄ‡∏•‡∏Ç‡πÅ‡∏£‡∏Å
    
    def _process_number(self, number_str: str, pattern_type: str, category: str) -> Dict:
        """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏•‡∏Ç‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß"""
        
        if not number_str.isdigit():
            return None
            
        num = int(number_str)
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç 2-3 ‡∏´‡∏•‡∏±‡∏Å
        if len(number_str) == 1:
            formatted_number = f"0{number_str}"
        elif len(number_str) > 3:
            # ‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 2-3 ‡∏´‡∏•‡∏±‡∏Å‡∏ó‡πâ‡∏≤‡∏¢
            formatted_number = number_str[-2:] if len(number_str) == 4 else number_str[-3:]
        else:
            formatted_number = number_str
            
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô
        confidence = self._calculate_number_confidence(pattern_type, category, num)
        
        return {
            'number': formatted_number,
            'original_value': number_str,
            'source': pattern_type,
            'confidence': confidence,
            'reason': self._get_number_reason(pattern_type, category)
        }
    
    def _calculate_number_confidence(self, pattern_type: str, category: str, number: int) -> int:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏•‡∏Ç"""
        
        base_confidence = {
            'license_plate': 95,      # ‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î)
            'case_number': 90,        # ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏î‡∏µ (‡πÉ‡∏´‡∏°‡πà)
            'court_score': 88,        # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏®‡∏≤‡∏• (‡πÉ‡∏´‡∏°‡πà)
            'pm_position': 85,        # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ô‡∏≤‡∏¢‡∏Å‡∏Ø (‡πÉ‡∏´‡∏°‡πà)
            'age_years': 85,          # ‡∏≠‡∏≤‡∏¢‡∏∏/‡∏õ‡∏µ (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á)
            'house_number': 80, 
            'time': 78,               # ‡πÄ‡∏ß‡∏•‡∏≤ (‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏π‡∏á‡∏Ç‡∏∂‡πâ‡∏ô)
            'quantity': 75,           # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô (‡πÉ‡∏´‡∏°‡πà)
            'date': 70,
            'money': 65,
            'general_numbers': 50
        }.get(pattern_type, 50)
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
        category_bonus = {
            'miracle': 12,
            'belief': 12,
            'accident': 10,
            'celebrity': 8,
            'economic': 6,
            'general': 0
        }.get(category, 0)
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏•‡∏Ç
        if 10 <= number <= 99:
            range_bonus = 5
        elif 100 <= number <= 999:
            range_bonus = 3
        else:
            range_bonus = 0
            
        return min(base_confidence + category_bonus + range_bonus, 100)
    
    def _calculate_final_score(self, base_score: int, extracted_numbers: List, category: str) -> int:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢"""
        
        # ‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏à‡∏≤‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏™‡∏Å‡∏±‡∏î‡πÑ‡∏î‡πâ
        number_bonus = min(len(extracted_numbers) * 5, 20)
        
        # ‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡πÄ‡∏•‡∏Ç
        if extracted_numbers:
            avg_confidence = sum(item['confidence'] for item in extracted_numbers) / len(extracted_numbers)
            confidence_bonus = int(avg_confidence / 10)
        else:
            confidence_bonus = 0
            
        final = base_score + number_bonus + confidence_bonus
        
        return min(final, 100)
    
    def _get_scoring_reason(self, category: str, num_count: int) -> str:
        """‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô"""
        
        reasons = {
            'miracle': f'‡∏Ç‡πà‡∏≤‡∏ß‡πÅ‡∏õ‡∏•‡∏Å/‡∏°‡∏´‡∏±‡∏®‡∏à‡∏£‡∏£‡∏¢‡πå - ‡∏Ñ‡∏ô‡∏ô‡∏¥‡∏¢‡∏°‡∏ï‡∏µ‡πÄ‡∏•‡∏Ç (‡∏û‡∏ö {num_count} ‡πÄ‡∏•‡∏Ç)',
            'belief': f'‡πÄ‡∏•‡∏Ç‡∏°‡∏á‡∏Ñ‡∏•/‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠ - ‡πÄ‡∏•‡∏Ç‡∏®‡∏±‡∏Å‡∏î‡∏¥‡πå‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå (‡∏û‡∏ö {num_count} ‡πÄ‡∏•‡∏Ç)',
            'accident': f'‡∏Ç‡πà‡∏≤‡∏ß‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏ - ‡πÄ‡∏•‡∏Ç‡∏°‡∏±‡∏Å‡∏à‡∏∞‡πÅ‡∏°‡πà‡∏ô‡∏™‡∏π‡∏á (‡∏û‡∏ö {num_count} ‡πÄ‡∏•‡∏Ç)',
            'celebrity': f'‡∏Ç‡πà‡∏≤‡∏ß‡∏Ñ‡∏ô‡∏î‡∏±‡∏á - ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î/‡∏≠‡∏≤‡∏¢‡∏∏‡∏°‡∏±‡∏Å‡∏≠‡∏≠‡∏Å (‡∏û‡∏ö {num_count} ‡πÄ‡∏•‡∏Ç)',
            'economic': f'‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à - ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç (‡∏û‡∏ö {num_count} ‡πÄ‡∏•‡∏Ç)', 
            'general': f'‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á (‡∏û‡∏ö {num_count} ‡πÄ‡∏•‡∏Ç)'
        }
        
        return reasons.get(category, f'‡∏Ç‡πà‡∏≤‡∏ß‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏∑‡πà‡∏ô (‡∏û‡∏ö {num_count} ‡πÄ‡∏•‡∏Ç)')
    
    def _get_number_reason(self, pattern_type: str, category: str) -> str:
        """‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏Ç‡∏≠‡∏á‡πÄ‡∏•‡∏Ç"""
        
        reasons = {
            'license_plate': '‡πÄ‡∏•‡∏Ç‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ - ‡πÄ‡∏•‡∏Ç‡∏î‡∏µ‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏ô‡∏ô‡∏¥‡∏¢‡∏°',
            'case_number': '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏î‡∏µ - ‡πÄ‡∏•‡∏Ç‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç',
            'court_score': '‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏®‡∏≤‡∏• - ‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô',
            'pm_position': '‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ô‡∏≤‡∏¢‡∏Å‡∏Ø - ‡πÄ‡∏•‡∏Ç‡∏≠‡∏≥‡∏ô‡∏≤‡∏à',
            'age_years': '‡∏≠‡∏≤‡∏¢‡∏∏/‡∏õ‡∏µ - ‡πÄ‡∏•‡∏Ç‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß',
            'house_number': '‡πÄ‡∏•‡∏Ç‡∏ö‡πâ‡∏≤‡∏ô - ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà', 
            'time': '‡πÄ‡∏ß‡∏•‡∏≤ - ‡πÇ‡∏°‡∏á‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç',
            'quantity': '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô - ‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì',
            'date': '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà - ‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç',
            'money': '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô - ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç',
            'general_numbers': '‡πÄ‡∏•‡∏Ç‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ - ‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡πÉ‡∏ô‡∏Ç‡πà‡∏≤‡∏ß'
        }
        
        return reasons.get(pattern_type, '‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å‡∏Ç‡πà‡∏≤‡∏ß')


# ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
def test_scorer():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô"""
    
    scorer = NewsLotteryScorer()
    
    # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏
    accident_news = {
        'title': '‡∏£‡∏ñ‡∏ä‡∏ô‡∏Å‡∏±‡∏ô‡∏™‡∏ô‡∏±‡πà‡∏ô 2 ‡∏Ñ‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï ‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô ‡∏Å‡∏Ç-1234',
        'content': '‡πÄ‡∏Å‡∏¥‡∏î‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏‡∏£‡∏ñ‡∏ä‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà 45 ‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà 3 ‡πÄ‡∏ß‡∏•‡∏≤ 14:30 ‡∏ô. ‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏≠‡∏≤‡∏¢‡∏∏ 35 ‡∏õ‡∏µ'
    }
    
    result = scorer.score_news_article(accident_news['title'], accident_news['content'])
    
    print("=== ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πà‡∏≤‡∏ß‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏ ===")
    print(f"‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°: {result['score']}")
    print(f"‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: {result['category']}")
    print(f"‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏™‡∏Å‡∏±‡∏î‡πÑ‡∏î‡πâ: {len(result['extracted_numbers'])} ‡πÄ‡∏•‡∏Ç")
    for num_info in result['extracted_numbers']:
        print(f"  - {num_info['number']} ({num_info['source']}) ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô: {num_info['confidence']}%")
    print(f"‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: {result['confidence_details']['reasoning']}")

if __name__ == "__main__":
    test_scorer()