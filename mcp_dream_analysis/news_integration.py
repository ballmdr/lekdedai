"""
Integration ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Dream Analysis ‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡πà‡∏≤‡∏ß
News Integration for Dream Analysis MCP Service
"""
import os
import sys
import re
from typing import List, Dict, Any, Optional

# Add Django path
sys.path.append(os.path.join(os.path.dirname(os.path.dirname(__file__)), 'app'))

try:
    from django_integration import dream_service
    MCP_AVAILABLE = True
except ImportError:
    MCP_AVAILABLE = False

class NewsContentAnalyzer:
    """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î"""
    
    def __init__(self):
        self.dream_keywords = {
            # ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏ö‡πà‡∏á‡∏ö‡∏≠‡∏Å‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ù‡∏±‡∏ô‡πÉ‡∏ô‡∏Ç‡πà‡∏≤‡∏ß
            'dream_indicators': ['‡∏ù‡∏±‡∏ô', '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ù‡∏±‡∏ô', '‡∏ù‡∏±‡∏ô‡πÄ‡∏´‡πá‡∏ô', '‡∏ù‡∏±‡∏ô‡∏ß‡πà‡∏≤', '‡∏ô‡∏¥‡∏°‡∏¥‡∏ï', '‡∏•‡∏≤‡∏á‡∏ù‡∏±‡∏ô'],
            
            # ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
            'prediction_words': ['‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢', '‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå', '‡∏ö‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç', '‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î', '‡πÄ‡∏•‡∏Ç‡∏°‡∏á‡∏Ñ‡∏•', '‡∏î‡∏ß‡∏á‡∏î‡∏µ'],
            
            # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏°‡∏±‡∏Å‡∏à‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î
            'sacred_places': ['‡∏ß‡∏±‡∏î', '‡∏®‡∏≤‡∏•', '‡πÄ‡∏à‡πâ‡∏≤‡∏ó‡∏µ‡πà', '‡πÄ‡∏à‡πâ‡∏≤‡∏û‡πà‡∏≠', '‡πÄ‡∏à‡πâ‡∏≤‡πÅ‡∏°‡πà', '‡∏û‡∏£‡∏∞', '‡∏£‡∏π‡∏õ‡∏õ‡∏±‡πâ‡∏ô']
        }
    
    def extract_dream_content_from_news(self, news_content: str) -> List[str]:
        """‡∏™‡∏Å‡∏±‡∏î‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ù‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏Ç‡πà‡∏≤‡∏ß"""
        dream_segments = []
        
        # ‡πÅ‡∏¢‡∏Å‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ
        sentences = re.split(r'[.!?]', news_content)
        
        for sentence in sentences:
            sentence = sentence.strip()
            if len(sentence) < 10:  # ‡∏Ç‡πâ‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏™‡∏±‡πâ‡∏ô‡πÜ
                continue
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏°‡∏µ‡∏Ñ‡∏≥‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ù‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            has_dream_keyword = any(keyword in sentence for keyword in self.dream_keywords['dream_indicators'])
            has_prediction = any(keyword in sentence for keyword in self.dream_keywords['prediction_words'])
            has_sacred = any(keyword in sentence for keyword in self.dream_keywords['sacred_places'])
            
            if has_dream_keyword or (has_prediction and has_sacred):
                dream_segments.append(sentence)
        
        return dream_segments
    
    def analyze_news_for_dreams(self, news_title: str, news_content: str) -> Dict[str, Any]:
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ù‡∏±‡∏ô"""
        if not MCP_AVAILABLE:
            return {
                'success': False,
                'error': 'MCP Dream Analysis service not available',
                'method': 'unavailable'
            }
        
        # ‡∏£‡∏ß‡∏°‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÅ‡∏•‡∏∞‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤
        full_text = f"{news_title} {news_content}"
        
        # ‡∏™‡∏Å‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ù‡∏±‡∏ô
        dream_segments = self.extract_dream_content_from_news(full_text)
        
        if not dream_segments:
            return {
                'success': True,
                'has_dream_content': False,
                'message': '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ù‡∏±‡∏ô‡πÉ‡∏ô‡∏Ç‡πà‡∏≤‡∏ß‡∏ô‡∏µ‡πâ',
                'method': 'no_content'
            }
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ù‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏ö
        all_numbers = []
        all_interpretations = []
        combined_confidence = 0
        
        for segment in dream_segments:
            try:
                result = dream_service.analyze_dream_sync(segment)
                
                if result.get('numbers'):
                    all_numbers.extend(result['numbers'])
                
                if result.get('interpretation'):
                    all_interpretations.append({
                        'segment': segment[:100] + '...' if len(segment) > 100 else segment,
                        'interpretation': result['interpretation'][:200] + '...' if len(result['interpretation']) > 200 else result['interpretation'],
                        'numbers': result['numbers'][:5],
                        'confidence': result.get('confidence', 0)
                    })
                
                combined_confidence += result.get('confidence', 0)
                
            except Exception as e:
                continue
        
        # ‡∏£‡∏ß‡∏°‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏•‡∏Ç
        unique_numbers = list(dict.fromkeys(all_numbers))[:12]  # ‡πÄ‡∏≠‡∏≤‡πÄ‡∏•‡∏Ç‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô 12 ‡∏ï‡∏±‡∏ß
        
        return {
            'success': True,
            'has_dream_content': True,
            'dream_segments': dream_segments,
            'dream_analyses': all_interpretations,
            'suggested_numbers': unique_numbers,
            'average_confidence': combined_confidence / max(len(all_interpretations), 1),
            'segments_analyzed': len(all_interpretations),
            'method': 'mcp_analysis'
        }
    
    def get_dream_numbers_from_news(self, news_title: str, news_content: str) -> List[str]:
        """‡∏î‡∏∂‡∏á‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î‡∏à‡∏≤‡∏Å‡∏Ç‡πà‡∏≤‡∏ß‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡πá‡∏ß (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÉ‡∏ô template)"""
        result = self.analyze_news_for_dreams(news_title, news_content)
        
        if result.get('success') and result.get('suggested_numbers'):
            return result['suggested_numbers'][:6]  # ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏Ñ‡πà 6 ‡πÄ‡∏•‡∏Ç‡πÅ‡∏£‡∏Å
        
        return []
    
    def generate_dream_summary_for_news(self, news_title: str, news_content: str) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ù‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏Ç‡πà‡∏≤‡∏ß"""
        result = self.analyze_news_for_dreams(news_title, news_content)
        
        if not result.get('success'):
            return ""
        
        if not result.get('has_dream_content'):
            return ""
        
        numbers = result.get('suggested_numbers', [])[:6]
        confidence = result.get('average_confidence', 0)
        
        if numbers:
            summary = f"üì∞ **‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î‡∏à‡∏≤‡∏Å‡∏Ç‡πà‡∏≤‡∏ß:** {', '.join(numbers)}"
            if confidence > 0:
                summary += f" (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à {confidence:.0f}%)"
            return summary
        
        return ""

# Global analyzer instance
news_analyzer = NewsContentAnalyzer()

# Utility functions ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Django
def analyze_news_article_for_dreams(news_title: str, news_content: str) -> Dict[str, Any]:
    """Main function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Django views ‡∏´‡∏£‡∏∑‡∏≠ models"""
    return news_analyzer.analyze_news_for_dreams(news_title, news_content)

def get_dream_numbers_from_article(news_title: str, news_content: str) -> List[str]:
    """‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î‡∏à‡∏≤‡∏Å‡∏Ç‡πà‡∏≤‡∏ß ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÉ‡∏ô template"""
    return news_analyzer.get_dream_numbers_from_news(news_title, news_content)

def get_dream_summary_from_article(news_title: str, news_content: str) -> str:
    """‡πÑ‡∏î‡πâ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ù‡∏±‡∏ô ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô template"""
    return news_analyzer.generate_dream_summary_for_news(news_title, news_content)