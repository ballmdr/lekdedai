# -*- coding: utf-8 -*-
from django.core.management.base import BaseCommand
from django.utils import timezone
from datetime import timedelta
from news.models import NewsArticle
from news.groq_lottery_analyzer import GroqLotteryAnalyzer

class Command(BaseCommand):
    help = 'р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕Вр╣Ир╕▓р╕зр╕Чр╕╡р╣Ир╕бр╕╡р╕нр╕вр╕╣р╣Ир╕Фр╣Йр╕зр╕в Groq Llama 3.1 8B Instant'

    def add_arguments(self, parser):
        parser.add_argument(
            '--limit',
            type=int,
            default=10,
            help='р╕Ир╕│р╕Щр╕зр╕Щр╕Вр╣Ир╕▓р╕зр╕Чр╕╡р╣Ир╕Ир╕░р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣М (default: 10)'
        )
        parser.add_argument(
            '--days',
            type=int,
            default=1,
            help='р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕Вр╣Ир╕▓р╕зр╕вр╣Йр╕нр╕Щр╕лр╕ер╕▒р╕Зр╕Бр╕╡р╣Ир╕зр╕▒р╕Щ (default: 1)'
        )
        parser.add_argument(
            '--force',
            action='store_true',
            help='р╕Ър╕▒р╕Зр╕Др╕▒р╕Ър╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╣Гр╕лр╕бр╣Ир╣Бр╕бр╣Йр╕зр╣Ир╕▓р╕Ир╕░р╕бр╕╡р╕Ьр╕ер╕Бр╕▓р╕гр╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╣Бр╕ер╣Йр╕з'
        )

    def handle(self, *args, **options):
        limit = options['limit']
        days = options['days']
        force = options['force']

        self.stdout.write(
            self.style.SUCCESS(f'ЁЯдЦ р╣Ар╕гр╕┤р╣Ир╕бр╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕Вр╣Ир╕▓р╕зр╕Фр╣Йр╕зр╕в Groq Llama 3.1 8B Instant')
        )
        self.stdout.write(f'ЁЯУК р╕Ир╕│р╕Бр╕▒р╕Ф: {limit} р╕Вр╣Ир╕▓р╕з, р╕вр╣Йр╕нр╕Щр╕лр╕ер╕▒р╕З: {days} р╕зр╕▒р╕Щ, р╕Ър╕▒р╕Зр╕Др╕▒р╕Ър╣Гр╕лр╕бр╣И: {force}')

        # Query р╕Вр╣Ир╕▓р╕зр╕Чр╕╡р╣Ир╕Ир╕░р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣М
        since_date = timezone.now() - timedelta(days=days)
        
        queryset = NewsArticle.objects.filter(
            created_at__gte=since_date,
            status='published'
        ).order_by('-created_at')

        if not force:
            # р╕Вр╣Йр╕▓р╕бр╕Вр╣Ир╕▓р╕зр╕Чр╕╡р╣Ир╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕Фр╣Йр╕зр╕в Groq р╣Бр╕ер╣Йр╕з
            queryset = queryset.exclude(
                insight_entities__contains=[{'analyzer_type': 'groq'}]
            )

        articles = queryset[:limit]

        if not articles:
            self.stdout.write(
                self.style.WARNING('тЪая╕П р╣Др╕бр╣Ир╕Юр╕Ър╕Вр╣Ир╕▓р╕зр╕Чр╕╡р╣Ир╕Хр╣Йр╕нр╕Зр╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣М')
            )
            return

        self.stdout.write(f'ЁЯУ░ р╕Юр╕Ъ {len(articles)} р╕Вр╣Ир╕▓р╕зр╕Чр╕╡р╣Ир╕Ир╕░р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣М')

        # р╕кр╕гр╣Йр╕▓р╕З Groq analyzer
        try:
            analyzer = GroqLotteryAnalyzer()
            self.stdout.write(self.style.SUCCESS('тЬЕ р╣Ар╕Кр╕╖р╣Ир╕нр╕бр╕Хр╣Ир╕н Groq API р╕кр╕│р╣Ар╕гр╣Зр╕И'))
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'тЭМ р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Ар╕Кр╕╖р╣Ир╕нр╕бр╕Хр╣Ир╕н Groq API: {e}')
            )
            return

        # р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕Чр╕╡р╕ер╕░р╕Вр╣Ир╕▓р╕з
        success_count = 0
        error_count = 0

        for i, article in enumerate(articles, 1):
            self.stdout.write(f'\nЁЯУС [{i}/{len(articles)}] {article.title[:50]}...')
            
            try:
                # р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕Фр╣Йр╕зр╕в Groq
                result = analyzer.analyze_news_for_lottery(
                    article.title,
                    article.content or article.intro
                )

                if result['success']:
                    if result.get('is_relevant') and result.get('numbers'):
                        # р╕нр╕▒р╕Юр╣Ар╕Фр╕Чр╕Ьр╕ер╕Бр╕▓р╕гр╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣М
                        article.extracted_numbers = ','.join(result['numbers'][:15])
                        article.lottery_relevance_score = result.get('relevance_score', 50)
                        article.lottery_category = result.get('category', 'other')
                        article.insight_summary = result.get('reasoning', '')
                        article.insight_impact_score = result.get('relevance_score', 0) / 100

                        # р╣Ар╕Юр╕┤р╣Ир╕бр╕Ьр╕е Groq analysis р╣Ар╕Вр╣Йр╕▓р╣Др╕Ыр╣Гр╕Щ insight_entities
                        groq_entities = [
                            {
                                'value': item['number'],
                                'entity_type': 'number',
                                'reasoning': item['source'],
                                'significance_score': item['confidence'] / 100,
                                'analyzer_type': 'groq'
                            } for item in result.get('detailed_numbers', [])
                        ]

                        # р╕гр╕зр╕бр╕Бр╕▒р╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Ар╕Фр╕┤р╕б (р╕Цр╣Йр╕▓р╕бр╕╡)
                        existing_entities = article.insight_entities or []
                        
                        # р╕ер╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕е Groq р╣Ар╕Бр╣Ир╕▓р╕нр╕нр╕Б (р╕Цр╣Йр╕▓ force=True)
                        if force:
                            existing_entities = [
                                e for e in existing_entities 
                                if e.get('analyzer_type') != 'groq'
                            ]
                        
                        article.insight_entities = existing_entities + groq_entities
                        article.save()

                        self.stdout.write(
                            self.style.SUCCESS(f'   тЬЕ р╣Ар╕ер╕В: {", ".join(result["numbers"])}, р╕Др╕░р╣Бр╕Щр╕Щ: {result.get("relevance_score", 0)}')
                        )
                        success_count += 1
                    else:
                        self.stdout.write(
                            self.style.WARNING('   тЪая╕П р╣Др╕бр╣Ир╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Вр╣Йр╕нр╕Зр╕Бр╕▒р╕Ър╕лр╕зр╕вр╕лр╕гр╕╖р╕нр╣Др╕бр╣Ир╕Юр╕Ър╣Ар╕ер╕Вр╣Ар╕Фр╣Зр╕Ф')
                        )
                else:
                    error_msg = result.get('error', 'Unknown error')
                    if result.get('error') == 'RATE_LIMIT_EXCEEDED':
                        self.stdout.write(
                            self.style.ERROR('   тЭМ Groq API Rate Limit - р╕лр╕вр╕╕р╕Фр╕Бр╕▓р╕гр╕Чр╕│р╕Зр╕▓р╕Щ')
                        )
                        break
                    else:
                        self.stdout.write(
                            self.style.ERROR(f'   тЭМ р╕Бр╕▓р╕гр╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕ер╣Йр╕бр╣Ар╕лр╕ер╕з: {error_msg}')
                        )
                        error_count += 1

            except Exception as e:
                self.stdout.write(
                    self.style.ERROR(f'   тЭМ Error: {e}')
                )
                error_count += 1

        # р╕кр╕гр╕╕р╕Ыр╕Ьр╕е
        self.stdout.write(f'\n=== р╕кр╕гр╕╕р╕Ыр╕Ьр╕ер╕Бр╕▓р╕гр╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣М ===')
        self.stdout.write(
            self.style.SUCCESS(f'тЬЕ р╕кр╕│р╣Ар╕гр╣Зр╕И: {success_count} р╕Вр╣Ир╕▓р╕з')
        )
        if error_count > 0:
            self.stdout.write(
                self.style.ERROR(f'тЭМ р╕ер╣Йр╕бр╣Ар╕лр╕ер╕з: {error_count} р╕Вр╣Ир╕▓р╕з')
            )
        
        self.stdout.write(
            self.style.SUCCESS(f'ЁЯОЙ р╣Ар╕кр╕гр╣Зр╕Ир╕кр╕┤р╣Йр╕Щр╕Бр╕▓р╕гр╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕Фр╣Йр╕зр╕в Groq!')
        )