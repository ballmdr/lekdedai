#!/usr/bin/env python
"""
Test script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á MCP Dream Analysis System
"""
import os
import sys
import asyncio
import json
from datetime import datetime

# Setup paths
CURRENT_DIR = os.path.dirname(os.path.abspath(__file__))
DJANGO_DIR = os.path.join(CURRENT_DIR, '..', 'app')
sys.path.insert(0, CURRENT_DIR)
sys.path.insert(0, DJANGO_DIR)

# Setup Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'lekdedai.settings')
try:
    import django
    django.setup()
    DJANGO_AVAILABLE = True
except Exception as e:
    print(f"‚ö†Ô∏è  Django not available: {e}")
    DJANGO_AVAILABLE = False

def test_ml_model_basic():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö ML Model ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô"""
    print("\nüî¨ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö ML Model ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô...")
    
    try:
        from dream_ml_model import DreamNumberMLModel
        
        model = DreamNumberMLModel()
        
        # Test feature extraction
        features = model.extract_thai_features("‡∏ù‡∏±‡∏ô‡πÄ‡∏´‡πá‡∏ô‡∏á‡∏π‡πÉ‡∏´‡∏ç‡πà‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß")
        print(f"‚úÖ Feature extraction: {len(features)} features")
        print(f"   ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: {dict(list(features.items())[:3])}")
        
        # Test traditional analysis (should work without training)
        traditional_result = model._traditional_analysis("‡∏ù‡∏±‡∏ô‡πÄ‡∏´‡πá‡∏ô‡∏á‡∏π‡πÉ‡∏´‡∏ç‡πà‡∏Å‡∏±‡∏î‡∏â‡∏±‡∏ô")
        print(f"‚úÖ Traditional analysis: {traditional_result}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå ML Model test failed: {e}")
        return False

async def test_mcp_server():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö MCP Server"""
    print("\nüåê ‡∏ó‡∏î‡∏™‡∏≠‡∏ö MCP Server...")
    
    try:
        from mcp_server import DreamAnalysisMCPServer, MCPRequest
        
        server = DreamAnalysisMCPServer()
        await server.initialize()
        
        # Test health check
        health_request = MCPRequest(
            method='health_check',
            params={},
            id='test-health'
        )
        
        response = await server.handle_request(health_request)
        print(f"‚úÖ Health check: {response.result['status']}")
        
        # Test dream analysis
        dream_request = MCPRequest(
            method='analyze_dream',
            params={'dream_text': '‡∏ù‡∏±‡∏ô‡πÄ‡∏´‡πá‡∏ô‡∏á‡∏π‡πÉ‡∏´‡∏ç‡πà‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏î‡∏â‡∏±‡∏ô'},
            id='test-dream'
        )
        
        response = await server.handle_request(dream_request)
        if response.result:
            print(f"‚úÖ Dream analysis successful")
            print(f"   Method: {response.result.get('analysis_method')}")
            print(f"   Numbers: {response.result.get('combined_numbers', [])[:5]}")
            print(f"   Confidence: {response.result.get('confidence', 0):.1f}%")
        else:
            print(f"‚ùå Dream analysis failed: {response.error}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå MCP Server test failed: {e}")
        return False

def test_django_integration():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö Django Integration"""
    print("\nüîó ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Django Integration...")
    
    if not DJANGO_AVAILABLE:
        print("‚ö†Ô∏è  Django not available, skipping Django tests")
        return False
    
    try:
        from django_integration import analyze_dream_for_django
        
        # Test dream analysis
        result = analyze_dream_for_django("‡∏ù‡∏±‡∏ô‡πÄ‡∏´‡πá‡∏ô‡∏ä‡πâ‡∏≤‡∏á‡∏Ç‡∏≤‡∏ß")
        
        print(f"‚úÖ Django integration successful")
        print(f"   Keywords: {result.get('keywords', [])}")
        print(f"   Numbers: {result.get('numbers', [])[:5]}")
        print(f"   Method: {result.get('analysis_method')}")
        print(f"   Confidence: {result.get('confidence', 0):.1f}%")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Django integration test failed: {e}")
        return False

def test_news_integration():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö News Integration"""
    print("\nüì∞ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö News Integration...")
    
    try:
        from news_integration import analyze_news_article_for_dreams
        
        # Test news with dream content
        test_title = "‡∏Ñ‡∏ô‡∏ù‡∏±‡∏ô‡πÄ‡∏´‡πá‡∏ô‡∏á‡∏π‡∏ó‡∏≠‡∏á ‡∏ö‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î"
        test_content = """
        ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤ ‡∏ô‡∏≤‡∏á‡∏™‡∏°‡∏®‡∏£‡∏µ ‡∏≠‡∏≤‡∏¢‡∏∏ 45 ‡∏õ‡∏µ ‡πÄ‡∏•‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏ù‡∏±‡∏ô‡πÄ‡∏´‡πá‡∏ô‡∏á‡∏π‡∏ó‡∏≠‡∏á‡πÉ‡∏´‡∏ç‡πà‡∏°‡∏≤‡∏´‡∏≤‡∏ï‡∏±‡∏ß
        ‡πÉ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ù‡∏±‡∏ô ‡∏á‡∏π‡∏ó‡∏≠‡∏á‡∏ô‡∏±‡πâ‡∏ô‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏°‡∏ï‡∏£ ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡πÄ‡∏Å‡∏•‡πá‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏¢
        ‡∏´‡∏•‡∏±‡∏á‡∏ï‡∏∑‡πà‡∏ô‡∏ô‡∏≠‡∏ô ‡∏ô‡∏≤‡∏á‡∏™‡∏°‡∏®‡∏£‡∏µ‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏≤‡∏á‡∏î‡∏µ ‡∏à‡∏∂‡∏á‡πÑ‡∏õ‡∏Ç‡∏≠‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î‡πÉ‡∏Å‡∏•‡πâ‡∏ö‡πâ‡∏≤‡∏ô
        ‡∏û‡∏£‡∏∞‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤ ‡∏á‡∏π‡∏ó‡∏≠‡∏á ‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á‡πÇ‡∏ä‡∏Ñ‡∏•‡∏≤‡∏† ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏•‡∏Ç 89, 98, 08
        """
        
        result = analyze_news_article_for_dreams(test_title, test_content)
        
        if result.get('success'):
            print(f"‚úÖ News integration successful")
            print(f"   Has dream content: {result.get('has_dream_content')}")
            if result.get('suggested_numbers'):
                print(f"   Suggested numbers: {result['suggested_numbers'][:6]}")
                print(f"   Confidence: {result.get('average_confidence', 0):.1f}%")
        else:
            print(f"‚ùå News analysis failed: {result.get('error', 'Unknown error')}")
        
        return result.get('success', False)
        
    except Exception as e:
        print(f"‚ùå News integration test failed: {e}")
        return False

def test_template_tags():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö Template Tags"""
    print("\nüè∑Ô∏è  ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Template Tags...")
    
    if not DJANGO_AVAILABLE:
        print("‚ö†Ô∏è  Django not available, skipping template tag tests")
        return False
    
    try:
        # Mock article object
        class MockArticle:
            def __init__(self, title, content):
                self.title = title
                self.content = content
        
        from dreams.templatetags.dream_analysis import extract_dream_numbers, dream_summary, has_dream_content
        
        # Test article with dream content
        test_article = MockArticle(
            "‡∏ù‡∏±‡∏ô‡πÄ‡∏´‡πá‡∏ô‡∏ä‡πâ‡∏≤‡∏á‡∏Ç‡∏≤‡∏ß", 
            "‡∏ù‡∏±‡∏ô‡∏ß‡πà‡∏≤‡∏ä‡πâ‡∏≤‡∏á‡∏Ç‡∏≤‡∏ß‡πÉ‡∏´‡∏ç‡πà‡∏°‡∏≤‡∏´‡∏≤‡∏â‡∏±‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏Ç 91 ‡∏Å‡∏±‡∏ö‡∏â‡∏±‡∏ô"
        )
        
        # Test filters
        numbers = extract_dream_numbers(test_article)
        summary = dream_summary(test_article)
        has_content = has_dream_content(test_article)
        
        print(f"‚úÖ Template tags working")
        print(f"   Extracted numbers: {numbers}")
        print(f"   Has dream content: {has_content}")
        if summary:
            print(f"   Summary preview: {str(summary)[:100]}...")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Template tags test failed: {e}")
        return False

def test_data_preparation():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö Data Preparation"""
    print("\nüìä ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Data Preparation...")
    
    if not DJANGO_AVAILABLE:
        print("‚ö†Ô∏è  Django not available, skipping data preparation tests")
        return False
    
    try:
        from data_preparation import DreamDataPreparator
        
        preparator = DreamDataPreparator()
        
        # Test synthetic data generation (doesn't need DB)
        synthetic_data = preparator._generate_synthetic_data()
        print(f"‚úÖ Synthetic data generation: {len(synthetic_data)} samples")
        
        if synthetic_data:
            sample = synthetic_data[0]
            print(f"   Sample: {sample['dream_text']}")
            print(f"   Numbers: {sample['main_number']}, {sample['secondary_number']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Data preparation test failed: {e}")
        return False

async def run_all_tests():
    """‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    print("üß™ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö MCP Dream Analysis System")
    print("=" * 60)
    
    test_results = {}
    
    # Basic tests (don't require Django)
    test_results['ml_model'] = test_ml_model_basic()
    test_results['mcp_server'] = await test_mcp_server()
    
    # Django-dependent tests
    if DJANGO_AVAILABLE:
        test_results['django_integration'] = test_django_integration()
        test_results['news_integration'] = test_news_integration()
        test_results['template_tags'] = test_template_tags()
        test_results['data_preparation'] = test_data_preparation()
    else:
        print("\n‚ö†Ô∏è  Django tests skipped - Django not available")
    
    # Summary
    print("\n" + "=" * 60)
    print("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:")
    
    total_tests = len(test_results)
    passed_tests = sum(1 for result in test_results.values() if result)
    
    for test_name, result in test_results.items():
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"   {test_name}: {status}")
    
    print(f"\n‡∏ú‡∏•‡∏£‡∏ß‡∏°: {passed_tests}/{total_tests} tests passed")
    
    if passed_tests == total_tests:
        print("üéâ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ú‡πà‡∏≤‡∏ô! ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    else:
        print("‚ö†Ô∏è  ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö")
    
    return test_results

if __name__ == "__main__":
    # Run async tests
    test_results = asyncio.run(run_all_tests())
    
    # Exit with appropriate code
    if all(test_results.values()):
        sys.exit(0)
    else:
        sys.exit(1)