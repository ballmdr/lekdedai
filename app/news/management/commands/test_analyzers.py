# -*- coding: utf-8 -*-
from django.core.management.base import BaseCommand
from news.analyzer_switcher import AnalyzerSwitcher

class Command(BaseCommand):
    help = '‡∏ó‡∏î‡∏™‡∏≠‡∏ö AI analyzers ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ (Groq ‡πÅ‡∏•‡∏∞ Gemini)'

    def add_arguments(self, parser):
        parser.add_argument(
            '--analyzer',
            type=str,
            choices=['auto', 'groq', 'gemini'],
            default='auto',
            help='‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ä‡πâ analyzer ‡πÉ‡∏î (default: auto)'
        )

    def handle(self, *args, **options):
        analyzer_type = options['analyzer']
        
        self.stdout.write(
            self.style.SUCCESS(f'üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö AI Analyzers (‡πÇ‡∏´‡∏°‡∏î: {analyzer_type})')
        )
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á switcher
        switcher = AnalyzerSwitcher(preferred_analyzer=analyzer_type)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ analyzers ‡∏ó‡∏µ‡πà‡∏°‡∏µ
        available = switcher.get_available_analyzers()
        self.stdout.write('\nüìã ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ AI Analyzers:')
        for name, status in available.items():
            status_icon = '‚úÖ' if status else '‚ùå'
            self.stdout.write(f'  {status_icon} {name.upper()}: {"‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ" if status else "‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ"}')
        
        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        test_cases = [
            {
                'title': '‡∏ó‡∏±‡∏Å‡∏©‡∏¥‡∏ì ‡∏ä‡∏¥‡∏ô‡∏ß‡∏±‡∏ï‡∏£ ‡∏≠‡∏≤‡∏¢‡∏∏ 74 ‡∏õ‡∏µ ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏ñ‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô ‡∏û‡∏£ 195',
                'content': '‡∏≠‡∏î‡∏µ‡∏ï‡∏ô‡∏≤‡∏¢‡∏Å‡∏£‡∏±‡∏ê‡∏°‡∏ô‡∏ï‡∏£‡∏µ ‡∏ó‡∏±‡∏Å‡∏©‡∏¥‡∏ì ‡∏ä‡∏¥‡∏ô‡∏ß‡∏±‡∏ï‡∏£ ‡∏≠‡∏≤‡∏¢‡∏∏ 74 ‡∏õ‡∏µ ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏ñ‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô ‡∏û‡∏£ 195 ‡πÄ‡∏ß‡∏•‡∏≤ 09.09 ‡∏ô. ‡∏°‡∏≤‡∏ñ‡∏∂‡∏á‡∏®‡∏≤‡∏•‡∏é‡∏µ‡∏Å‡∏≤ ‡∏Ñ‡∏î‡∏µ‡∏ä‡∏±‡πâ‡∏ô 14'
            },
            {
                'title': '‡∏£‡∏ñ‡∏ä‡∏ô‡πÄ‡∏™‡∏≤‡πÑ‡∏ü‡∏ü‡πâ‡∏≤ ‡∏î‡∏±‡∏ö 3 ‡∏®‡∏û ‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö 5 ‡∏Ñ‡∏ô',
                'content': '‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ß‡∏•‡∏≤ 23.30 ‡∏ô. ‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô ‡∏Å‡∏ó-8524 ‡∏ä‡∏ô‡πÄ‡∏™‡∏≤‡πÑ‡∏ü‡∏ü‡πâ‡∏≤ ‡∏ú‡∏π‡πâ‡∏Ç‡∏±‡∏ö‡∏Ç‡∏µ‡πà‡∏≠‡∏≤‡∏¢‡∏∏ 28 ‡∏õ‡∏µ ‡∏î‡∏±‡∏ö‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà'
            },
            {
                'title': '‡∏´‡∏∏‡πâ‡∏ô‡∏õ‡∏¥‡∏î‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏•‡∏ö 15.22 ‡∏à‡∏∏‡∏î',
                'content': '‡∏ï‡∏•‡∏≤‡∏î‡∏´‡∏∏‡πâ‡∏ô‡πÑ‡∏ó‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏î‡∏±‡∏ö 1,385.46 ‡∏à‡∏∏‡∏î ‡∏•‡∏î‡∏•‡∏á 15.22 ‡∏à‡∏∏‡∏î ‡∏Ñ‡∏¥‡∏î‡πÄ‡∏õ‡πá‡∏ô -1.09%'
            }
        ]
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Å‡∏£‡∏ì‡∏µ
        for i, test_case in enumerate(test_cases, 1):
            self.stdout.write(f'\nüîç [{i}] ‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {test_case["title"][:50]}...')
            
            try:
                # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
                is_relevant = switcher.is_lottery_relevant(
                    test_case['title'], 
                    test_case['content']
                )
                
                self.stdout.write(f'   üìä ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏´‡∏ß‡∏¢: {"‚úÖ ‡πÉ‡∏ä‡πà" if is_relevant else "‚ùå ‡πÑ‡∏°‡πà"}')
                
                if is_relevant:
                    # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î
                    result = switcher.analyze_news_for_lottery(
                        test_case['title'],
                        test_case['content']
                    )
                    
                    if result['success']:
                        analyzer_used = result.get('analyzer_type', 'unknown').upper()
                        fallback_used = ' (fallback)' if result.get('used_fallback') else ''
                        
                        self.stdout.write(
                            self.style.SUCCESS(f'   ü§ñ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢: {analyzer_used}{fallback_used}')
                        )
                        self.stdout.write(f'   üî¢ ‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î: {", ".join(result["numbers"])}')
                        self.stdout.write(f'   üìà ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: {result.get("relevance_score", 0)}/100')
                        self.stdout.write(f'   üìÇ ‡∏´‡∏°‡∏ß‡∏î: {result.get("category", "other")}')
                        self.stdout.write(f'   üí° ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: {result.get("reasoning", "")[:60]}...')
                    else:
                        error_msg = result.get('error', 'Unknown error')
                        self.stdout.write(
                            self.style.ERROR(f'   ‚ùå ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {error_msg}')
                        )
                
            except Exception as e:
                self.stdout.write(
                    self.style.ERROR(f'   ‚ùå Error: {e}')
                )
        
        # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
        self.stdout.write('\n=== ‡∏™‡∏£‡∏∏‡∏õ ===')
        active_analyzer = switcher.get_analyzer()
        if active_analyzer:
            analyzer_name = 'Groq' if hasattr(active_analyzer, '_make_request') else 'Gemini'
            self.stdout.write(
                self.style.SUCCESS(f'‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏î‡πâ‡∏ß‡∏¢ {analyzer_name} analyzer')
            )
        else:
            self.stdout.write(
                self.style.ERROR('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö analyzer ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ')
            )
        
        self.stdout.write(
            self.style.SUCCESS('üéâ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!')
        )