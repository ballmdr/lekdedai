#!/usr/bin/env python
"""
Test script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á dreams page ‡∏Å‡∏±‡∏ö Expert AI
"""
import requests
import json
import sys

def test_dreams_api():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö dreams API"""
    
    # URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö (localhost Docker)
    base_url = "http://localhost:8000"
    analyze_url = f"{base_url}/dreams/analyze/"
    
    # Test cases
    test_cases = [
        {
            "name": "Positive Dream",
            "dream_text": "‡∏ù‡∏±‡∏ô‡πÄ‡∏´‡πá‡∏ô‡∏ä‡πâ‡∏≤‡∏á‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡∏ô‡πâ‡∏≥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç",
            "expected_sentiment": "Positive"
        },
        {
            "name": "Negative Dream", 
            "dream_text": "‡∏ù‡∏±‡∏ô‡πÄ‡∏´‡πá‡∏ô‡∏á‡∏π‡∏™‡∏µ‡∏î‡∏≥‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡∏ç‡πà‡πÑ‡∏•‡πà‡∏Å‡∏±‡∏î ‡∏ô‡πà‡∏≤‡∏Å‡∏•‡∏±‡∏ß‡∏°‡∏≤‡∏Å‡πÜ",
            "expected_sentiment": "Negative"
        },
        {
            "name": "Neutral Dream",
            "dream_text": "‡∏ù‡∏±‡∏ô‡πÄ‡∏´‡πá‡∏ô‡∏ö‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏Å‡πà‡∏≤",
            "expected_sentiment": "Neutral"
        }
    ]
    
    print("üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Dreams API ‡∏Å‡∏±‡∏ö Expert AI")
    print("=" * 60)
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\nüìã Test Case {i}: {test_case['name']}")
        print(f"Input: {test_case['dream_text']}")
        print("-" * 40)
        
        try:
            # ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÑ‡∏õ analyze
            response = requests.post(
                analyze_url,
                json={"dream_text": test_case['dream_text']},
                headers={"Content-Type": "application/json"},
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                
                if data.get('success'):
                    result = data.get('result', {})
                    
                    print(f"‚úÖ Success!")
                    print(f"üîÆ Sentiment: {result.get('sentiment', 'N/A')}")
                    print(f"ü§ñ Expert AI: {'Yes' if result.get('is_expert_ai') else 'No'}")
                    print(f"üî¢ Numbers: {', '.join(result.get('numbers', [])[:5])}")
                    
                    if result.get('predicted_numbers'):
                        print(f"üß† Top Predictions:")
                        for pred in result['predicted_numbers'][:3]:
                            print(f"   {pred['number']} - {pred['score']:.2f} - {pred['reason'][:50]}...")
                    
                    # Check sentiment
                    expected = test_case['expected_sentiment']
                    actual = result.get('sentiment')
                    if actual == expected:
                        print(f"‚úÖ Sentiment correct: {actual}")
                    else:
                        print(f"‚ö†Ô∏è Sentiment mismatch. Expected: {expected}, Got: {actual}")
                        
                else:
                    print(f"‚ùå API Error: {data.get('error', 'Unknown error')}")
                    
            else:
                print(f"‚ùå HTTP Error: {response.status_code}")
                print(f"Response: {response.text[:200]}")
                
        except requests.exceptions.ConnectionError:
            print("‚ùå Connection Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ")
            print("üí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Docker container ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà")
            break
            
        except requests.exceptions.Timeout:
            print("‚ùå Timeout: ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ")
            
        except Exception as e:
            print(f"‚ùå Unexpected Error: {str(e)}")

def test_dreams_page():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤ dreams"""
    
    base_url = "http://localhost:8000"
    dreams_url = f"{base_url}/dreams/"
    
    print(f"\nüåê ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤ Dreams")
    print("=" * 60)
    
    try:
        response = requests.get(dreams_url, timeout=10)
        
        if response.status_code == 200:
            print("‚úÖ ‡∏´‡∏ô‡πâ‡∏≤ Dreams ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ elements ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            content = response.text
            
            checks = [
                ("sentimentBadge", "Sentiment Badge element"),
                ("expertNumbers", "Expert Numbers section"),
                ("aiModelBadge", "AI Model Badge"),
                ("predicted_numbers", "Predicted numbers handling")
            ]
            
            for element_id, description in checks:
                if element_id in content:
                    print(f"‚úÖ {description} - Found")
                else:
                    print(f"‚ùå {description} - Missing")
                    
        else:
            print(f"‚ùå ‡∏´‡∏ô‡πâ‡∏≤ Dreams ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: HTTP {response.status_code}")
            
    except requests.exceptions.ConnectionError:
        print("‚ùå Connection Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ")
        
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")

if __name__ == "__main__":
    try:
        test_dreams_page()
        test_dreams_api()
        
        print(f"\nüéâ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
        print("üìù ‡∏´‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ú‡πà‡∏≤‡∏ô ‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤ Expert AI ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        
    except KeyboardInterrupt:
        print(f"\n‚èπÔ∏è ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å")
    except Exception as e:
        print(f"\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {str(e)}")