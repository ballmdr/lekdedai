import re
from collections import Counter
from django.db import models

class NewsAnalyzer:
    """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å‡∏Ç‡πà‡∏≤‡∏ß ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ù‡∏±‡∏ô"""
    
    def __init__(self):
        pass
    
    def analyze_article(self, article):
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡πà‡∏≤‡∏ß ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ù‡∏±‡∏ô"""
        text = f"{article.title} {article.content}".lower()
        
        found_numbers = []
        keywords_found = []
        confidence = 50  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà 50%
        
        print(f"üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πà‡∏≤‡∏ß: {article.title[:50]}...")
        print(f"üìù ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: {text[:100]}...")
        
        try:
            # Import DreamKeyword ‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á circular import
            from dreams.models import DreamKeyword
            
            # 1. ‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡πÉ‡∏ô‡∏Ç‡πà‡∏≤‡∏ß
            direct_numbers = self.extract_direct_numbers(text)
            print(f"üî¢ ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ï‡∏£‡∏á‡πÜ: {direct_numbers}")
            found_numbers.extend(direct_numbers)
            
            # 2. ‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç (‡πÉ‡∏ä‡πâ DreamKeyword)
            keyword_numbers, keywords = self.extract_dream_keyword_numbers(text)
            print(f"üîë ‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: {keyword_numbers}")
            print(f"üìö ‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏û‡∏ö: {keywords}")
            found_numbers.extend(keyword_numbers)
            keywords_found.extend(keywords)
            
            # 3. ‡∏´‡∏≤‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ
            plate_numbers = self.extract_plate_numbers(text)
            print(f"üöó ‡πÄ‡∏•‡∏Ç‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ: {plate_numbers}")
            found_numbers.extend(plate_numbers)
            if plate_numbers:
                confidence += 10
            
            # 4. ‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏ö‡πâ‡∏≤‡∏ô
            house_numbers = self.extract_house_numbers(text)
            print(f"üè† ‡πÄ‡∏•‡∏Ç‡∏ö‡πâ‡∏≤‡∏ô: {house_numbers}")
            found_numbers.extend(house_numbers)
            if house_numbers:
                confidence += 5
            
            # 5. ‡∏•‡∏ö‡πÄ‡∏•‡∏Ç‡∏ã‡πâ‡∏≥‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á
            unique_numbers = self.process_numbers(found_numbers)
            print(f"‚ú® ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß: {unique_numbers}")
            
            # 6. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠
            if len(unique_numbers) > 0:
                confidence = min(confidence + (len(keywords_found) * 5), 95)
            
            print(f"üéØ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢: ‡πÄ‡∏•‡∏Ç {len(unique_numbers)} ‡∏ï‡∏±‡∏ß, ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠ {confidence}%")
            
            return {
                'numbers': unique_numbers[:15],  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 15 ‡πÄ‡∏•‡∏Ç
                'keywords': keywords_found,
                'confidence': confidence
            }
            
        except Exception as e:
            # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°
            print(f"‚ùå Error using DreamKeyword: {e}")
            return self.analyze_article_fallback(article)
    
    def analyze_article_fallback(self, article):
        """‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏° (fallback)"""
        text = f"{article.title} {article.content}".lower()
        
        found_numbers = []
        keywords_found = []
        confidence = 50
        
        print(f"üîÑ ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏° (fallback)")
        
        # ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°
        direct_numbers = self.extract_direct_numbers(text)
        print(f"üî¢ ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ï‡∏£‡∏á‡πÜ (fallback): {direct_numbers}")
        found_numbers.extend(direct_numbers)
        
        # ‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°
        keyword_numbers, keywords = self.extract_keyword_numbers_fallback(text)
        print(f"üîë ‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç (fallback): {keyword_numbers}")
        print(f"üìö ‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏û‡∏ö (fallback): {keywords}")
        found_numbers.extend(keyword_numbers)
        keywords_found.extend(keywords)
        
        unique_numbers = self.process_numbers(found_numbers)
        print(f"‚ú® ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß (fallback): {unique_numbers}")
        
        if len(unique_numbers) > 0:
            confidence = min(confidence + (len(keywords_found) * 5), 95)
        
        print(f"üéØ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ (fallback): ‡πÄ‡∏•‡∏Ç {len(unique_numbers)} ‡∏ï‡∏±‡∏ß, ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠ {confidence}%")
        
        return {
            'numbers': unique_numbers[:15],
            'keywords': keywords_found,
            'confidence': confidence
        }
    
    def extract_direct_numbers(self, text):
        """‡∏´‡∏≤‡πÄ‡∏•‡∏Ç 2-3 ‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡∏ï‡∏£‡∏á‡πÜ"""
        # ‡∏´‡∏≤‡πÄ‡∏•‡∏Ç 2-3 ‡∏´‡∏•‡∏±‡∏Å
        numbers = re.findall(r'\b\d{2,3}\b', text)
        
        # ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à (‡πÑ‡∏°‡πà‡πÄ‡∏≠‡∏≤‡∏õ‡∏µ ‡∏û.‡∏®. ‡∏´‡∏£‡∏∑‡∏≠ ‡∏Ñ.‡∏®.)
        filtered = []
        for num in numbers:
            if len(num) == 2:
                filtered.append(num)
            elif len(num) == 3 and not (num.startswith('25') or num.startswith('20') or num.startswith('19')):
                filtered.append(num)
                # ‡πÅ‡∏¢‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç 2 ‡∏ï‡∏±‡∏ß‡∏î‡πâ‡∏ß‡∏¢
                filtered.append(num[:2])
                filtered.append(num[1:])
        
        return filtered
    
    def extract_dream_keyword_numbers(self, text):
        """‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏ô DreamKeyword"""
        numbers = []
        keywords = []
        
        try:
            from dreams.models import DreamKeyword
            
            # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ keywords ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• DreamKeyword
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á keyword (‡∏¢‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô)
            all_keywords = sorted(DreamKeyword.objects.all(), key=lambda x: len(x.keyword), reverse=True)
            
            matched_positions = []  # ‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏ö‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß
            
            for keyword_obj in all_keywords:
                keyword = keyword_obj.keyword.lower()
                
                # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏≥ ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≠‡∏ô‡∏ó‡∏±‡∏ö
                if keyword in text:
                    # ‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏µ‡πâ
                    start_idx = 0
                    while True:
                        idx = text.find(keyword, start_idx)
                        if idx == -1:
                            break
                        
                        start, end = idx, idx + len(keyword)
                        
                        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                        overlap = any(start < pos_end and end > pos_start for pos_start, pos_end in matched_positions)
                        
                        if not overlap:
                            matched_positions.append((start, end))
                            keywords.append(keyword_obj.keyword)
                            
                            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏°‡∏±‡∏Å‡∏ï‡∏µ
                            numbers.extend(keyword_obj.get_numbers_list())
                            break  # ‡πÄ‡∏à‡∏≠‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡∏Å‡πá‡∏û‡∏≠
                        
                        start_idx = idx + 1
            
            # ‡∏•‡∏ö‡πÄ‡∏•‡∏Ç‡∏ã‡πâ‡∏≥
            numbers = list(dict.fromkeys(numbers))
            
        except Exception as e:
            print(f"Error in extract_dream_keyword_numbers: {e}")
            # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°
            return self.extract_keyword_numbers_fallback(text)
        
        return numbers, keywords
    
    def extract_keyword_numbers_fallback(self, text):
        """‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏° (fallback)"""
        # ‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°
        keyword_numbers = {
            '‡∏ï‡∏≤‡∏¢': ['07', '70', '04', '40'],
            '‡πÄ‡∏Å‡∏¥‡∏î': ['12', '21', '01', '10'],
            '‡∏£‡∏ñ': ['18', '81', '54', '45'],
            '‡∏ö‡πâ‡∏≤‡∏ô': ['14', '41', '16', '61'],
            '‡πÄ‡∏á‡∏¥‡∏ô': ['28', '82', '26', '62'],
            '‡∏ó‡∏≠‡∏á': ['39', '93', '29', '92'],
            '‡∏ô‡πâ‡∏≥': ['09', '90', '19', '91'],
            '‡πÑ‡∏ü': ['17', '71', '27', '72'],
            '‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ': ['38', '83', '48', '84'],
            '‡∏û‡∏£‡∏∞': ['23', '32', '33'],
            '‡πÅ‡∏°‡πà': ['15', '51', '50'],
            '‡∏û‡πà‡∏≠': ['25', '52', '20'],
        }
        
        numbers = []
        keywords = []
        
        for keyword, nums in keyword_numbers.items():
            if keyword in text:
                numbers.extend(nums)
                keywords.append(keyword)
        
        return numbers, keywords
    
    def extract_plate_numbers(self, text):
        """‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ"""
        numbers = []
        
        # ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ‡πÑ‡∏ó‡∏¢
        patterns = [
            r'[0-9‡∏Å-‡∏Æ]{2}\s*[-]?\s*(\d{2,4})',  # ‡∏Å‡∏Ç-1234
            r'(\d{1,2})\s*[‡∏Å-‡∏Æ]{2}\s*(\d{2,4})',  # 1‡∏Å‡∏Ç 1234
            r'‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô\s*(\d{2,4})',  # ‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô 1234
        ]
        
        for pattern in patterns:
            matches = re.findall(pattern, text)
            for match in matches:
                if isinstance(match, tuple):
                    for m in match:
                        if m and m.isdigit():
                            if len(m) <= 3:
                                numbers.append(m.zfill(2))
                            else:
                                numbers.append(m[:2])
                                numbers.append(m[-2:])
                else:
                    if len(match) <= 3:
                        numbers.append(match.zfill(2))
        
        return numbers
    
    def extract_house_numbers(self, text):
        """‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏ö‡πâ‡∏≤‡∏ô"""
        numbers = []
        
        patterns = [
            r'‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà\s*(\d{1,3})',
            r'‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà\s*(\d{1,3})',
            r'‡∏´‡∏°‡∏π‡πà\s*(\d{1,2})',
            r'‡∏ã‡∏≠‡∏¢\s*(\d{1,2})',
        ]
        
        for pattern in patterns:
            matches = re.findall(pattern, text)
            for match in matches:
                if len(match) <= 2:
                    numbers.append(match.zfill(2))
                elif len(match) == 3:
                    numbers.append(match[:2])
                    numbers.append(match[-2:])
        
        return numbers
    
    def process_numbers(self, numbers):
        """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÄ‡∏•‡∏Ç"""
        # ‡∏ô‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà
        counter = Counter(numbers)
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà
        sorted_numbers = sorted(counter.items(), key=lambda x: x[1], reverse=True)
        
        # ‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏•‡∏Ç (‡πÑ‡∏°‡πà‡πÄ‡∏≠‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà)
        return [num for num, count in sorted_numbers]