"""
Management command ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AI
"""

from django.core.management.base import BaseCommand, CommandError
from ai_engine.models import DataSource, AIModelType
import logging

logger = logging.getLogger(__name__)

class Command(BaseCommand):
    help = '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÇ‡∏°‡πÄ‡∏î‡∏• AI ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô'

    def add_arguments(self, parser):
        parser.add_argument(
            '--create-sources',
            action='store_true',
            help='‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô'
        )
        
        parser.add_argument(
            '--create-models',
            action='store_true',
            help='‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• AI ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô'
        )
        
        parser.add_argument(
            '--reset',
            action='store_true',
            help='‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà (‡∏£‡∏∞‡∏ß‡∏±‡∏á!)'
        )

    def handle(self, *args, **options):
        if options['reset']:
            self.stdout.write(self.style.WARNING('‚ö†Ô∏è  ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î...'))
            DataSource.objects.all().delete()
            AIModelType.objects.all().delete()
            self.stdout.write('‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß')
        
        if options['create_sources'] or not DataSource.objects.exists():
            self._create_data_sources()
        
        if options['create_models'] or not AIModelType.objects.exists():
            self._create_ai_models()
        
        self.stdout.write(self.style.SUCCESS('‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö AI ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô'))
    
    def _create_data_sources(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô"""
        
        self.stdout.write('üìä ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...')
        
        data_sources = [
            # ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πà‡∏≤‡∏ß
            {
                'name': '‡∏Ç‡πà‡∏≤‡∏ß‡∏´‡∏ß‡∏¢‡∏à‡∏≤‡∏Å News App',
                'source_type': 'news',
                'url': '/news/',
                'api_endpoint': '',
                'description': '‡∏î‡∏∂‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏´‡∏ß‡∏¢‡∏à‡∏≤‡∏Å News App ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏£‡∏ß‡∏°‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå',
                'is_active': True,
                'scraping_interval': 3  # ‡∏ó‡∏∏‡∏Å 3 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á (‡∏ö‡πà‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏¢‡πÉ‡∏ô)
            },
            {
                'name': 'Google News - ‡∏´‡∏ß‡∏¢',
                'source_type': 'news', 
                'url': 'https://news.google.com/search?q=‡∏´‡∏ß‡∏¢',
                'api_endpoint': '',
                'is_active': False,  # ‡∏õ‡∏¥‡∏î‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ API Key
                'scraping_interval': 12
            },
            
            # ‡πÅ‡∏´‡∏•‡πà‡∏á‡πÇ‡∏ã‡πÄ‡∏ä‡∏µ‡∏¢‡∏•‡∏°‡∏µ‡πÄ‡∏î‡∏µ‡∏¢
            {
                'name': 'Facebook - ‡∏Å‡∏•‡∏∏‡∏°‡∏´‡∏ß‡∏¢',
                'source_type': 'social_media',
                'url': 'https://facebook.com',
                'api_endpoint': '',
                'is_active': True,
                'scraping_interval': 4
            },
            {
                'name': 'Twitter - #‡∏´‡∏ß‡∏¢ #‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î',
                'source_type': 'social_media',
                'url': 'https://twitter.com/search?q=%23‡∏´‡∏ß‡∏¢',
                'api_endpoint': '',
                'is_active': True,
                'scraping_interval': 3
            },
            
            # ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ù‡∏±‡∏ô
            {
                'name': '‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ù‡∏±‡∏ô',
                'source_type': 'dreams',
                'url': '',
                'api_endpoint': '',
                'is_active': True,
                'scraping_interval': 8
            },
            
            # ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå
            {
                'name': 'Google Trends - ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏ß‡∏¢',
                'source_type': 'trends',
                'url': 'https://trends.google.com',
                'api_endpoint': '',
                'is_active': True,
                'scraping_interval': 24
            },
            
            # ‡πÅ‡∏´‡∏•‡πà‡∏á‡πÇ‡∏´‡∏£‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå
            {
                'name': '‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡πÇ‡∏´‡∏£‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå',
                'source_type': 'astrology',
                'url': '',
                'api_endpoint': '',
                'is_active': False,  # ‡∏õ‡∏¥‡∏î‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô
                'scraping_interval': 24
            }
        ]
        
        created_count = 0
        for source_data in data_sources:
            source, created = DataSource.objects.get_or_create(
                name=source_data['name'],
                defaults=source_data
            )
            
            if created:
                created_count += 1
                self.stdout.write(f'  ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á: {source.name}')
            else:
                self.stdout.write(f'  ‚è≠Ô∏è  ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß: {source.name}')
        
        self.stdout.write(f'‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà {created_count} ‡πÅ‡∏´‡∏•‡πà‡∏á')
    
    def _create_ai_models(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• AI ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô"""
        
        self.stdout.write('ü§ñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• AI...')
        
        ai_models = [
            {
                'name': 'Journalist AI',
                'role': 'journalist',
                'description': '‡πÇ‡∏°‡πÄ‡∏î‡∏• AI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡πÇ‡∏ã‡πÄ‡∏ä‡∏µ‡∏¢‡∏•‡∏°‡∏µ‡πÄ‡∏î‡∏µ‡∏¢ ‡∏™‡∏Å‡∏±‡∏î‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏£‡∏∞‡πÅ‡∏™‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏¥‡∏¢‡∏°',
                'input_data_types': ['news', 'social_media'],
                'weight_in_ensemble': 0.4,
                'is_active': True
            },
            {
                'name': 'Dream Interpreter AI',
                'role': 'interpreter', 
                'description': '‡πÇ‡∏°‡πÄ‡∏î‡∏• AI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ù‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡πÇ‡∏´‡∏£‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå ‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç',
                'input_data_types': ['dreams', 'astrology'],
                'weight_in_ensemble': 0.3,
                'is_active': True
            },
            {
                'name': 'Statistical Trend AI',
                'role': 'statistician',
                'description': '‡πÇ‡∏°‡πÄ‡∏î‡∏• AI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏° ‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏Æ‡∏¥‡∏ï ‡πÄ‡∏•‡∏Ç‡πÄ‡∏¢‡πá‡∏ô ‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö',
                'input_data_types': ['statistics', 'trends'],
                'weight_in_ensemble': 0.3,
                'is_active': True
            },
            {
                'name': 'Ensemble Master AI',
                'role': 'ensemble',
                'description': '‡πÇ‡∏°‡πÄ‡∏î‡∏• AI ‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á 3 ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢',
                'input_data_types': ['all'],
                'weight_in_ensemble': 1.0,
                'is_active': True
            }
        ]
        
        created_count = 0
        for model_data in ai_models:
            model, created = AIModelType.objects.get_or_create(
                role=model_data['role'],
                defaults=model_data
            )
            
            if created:
                created_count += 1
                self.stdout.write(f'  ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á: {model.name}')
            else:
                self.stdout.write(f'  ‚è≠Ô∏è  ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß: {model.name}')
                # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å
                if model.weight_in_ensemble != model_data['weight_in_ensemble']:
                    model.weight_in_ensemble = model_data['weight_in_ensemble']
                    model.save()
                    weight = model_data["weight_in_ensemble"]
                    self.stdout.write(f'    üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å: {weight}')
        
        self.stdout.write(f'‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• AI ‡πÉ‡∏´‡∏°‡πà {created_count} ‡πÇ‡∏°‡πÄ‡∏î‡∏•')
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏£‡∏ß‡∏°
        total_weight = sum([
            AIModelType.objects.get(role='journalist').weight_in_ensemble,
            AIModelType.objects.get(role='interpreter').weight_in_ensemble,
            AIModelType.objects.get(role='statistician').weight_in_ensemble
        ])
        
        if abs(total_weight - 1.0) > 0.01:
            self.stdout.write(
                self.style.WARNING(f'‚ö†Ô∏è  ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏°‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö 1.0 (‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {total_weight})')
            )
        else:
            self.stdout.write('‚úÖ ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á')