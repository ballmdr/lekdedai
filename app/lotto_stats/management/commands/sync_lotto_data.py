import logging
from django.core.management.base import BaseCommand
from django.utils import timezone
from datetime import datetime, timedelta
from lottery_checker.models import LottoResult
from lotto_stats.models import LotteryDraw
from utils.lottery_dates import LOTTERY_DATES

logger = logging.getLogger(__name__)

class Command(BaseCommand):
    help = '‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ß‡∏¢‡∏à‡∏≤‡∏Å lottery_checker ‡πÑ‡∏õ‡∏¢‡∏±‡∏á lotto_stats'
    
    def add_arguments(self, parser):
        parser.add_argument(
            '--days-back',
            type=int,
            default=30,
            help='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á (default: 30)'
        )
        parser.add_argument(
            '--force',
            action='store_true',
            help='‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß'
        )
        parser.add_argument(
            '--clear-existing',
            action='store_true',
            help='‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡πÉ‡∏ô lotto_stats ‡∏Å‡πà‡∏≠‡∏ô‡∏ã‡∏¥‡∏á‡∏Ñ‡πå'
        )
    
    def handle(self, *args, **options):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á"""
        days_back = options['days_back']
        force = options['force']
        clear_existing = options['clear_existing']
        
        if clear_existing:
            self.stdout.write("üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô lotto_stats...")
            LotteryDraw.objects.all().delete()
            self.stdout.write(self.style.SUCCESS("‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô"))
        
        # ‡πÉ‡∏ä‡πâ LotteryDates ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°
        self.stdout.write(f"üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ß‡∏¢‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î...")
        
        # ‡∏î‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏ß‡∏¢‡∏≠‡∏≠‡∏Å‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
        recent_draw_dates = LOTTERY_DATES.get_recent_draw_dates(days_back)
        
        if not recent_draw_dates:
            self.stdout.write(
                self.style.WARNING(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏ß‡∏¢‡∏≠‡∏≠‡∏Å‡πÉ‡∏ô {days_back} ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
            )
            return
        
        self.stdout.write(f"üìä ‡∏û‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏ß‡∏¢‡∏≠‡∏≠‡∏Å {len(recent_draw_dates)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        
        synced_count = 0
        updated_count = 0
        error_count = 0
        
        for date_str in recent_draw_dates:
            try:
                # ‡πÅ‡∏õ‡∏•‡∏á string ‡πÄ‡∏õ‡πá‡∏ô date
                draw_date = datetime.strptime(date_str, '%Y-%m-%d').date()
                
                # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å lottery_checker
                lotto_result = LottoResult.objects.filter(draw_date=draw_date).first()
                
                if not lotto_result:
                    self.stdout.write(
                        self.style.WARNING(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô lottery_checker ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {date_str}")
                    )
                    error_count += 1
                    continue
                
                # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å JSON ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà lotto_stats ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
                converted_data = self.convert_lotto_data(lotto_result)
                
                if not converted_data:
                    self.stdout.write(
                        self.style.WARNING(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {date_str} ‡πÑ‡∏î‡πâ (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•)")
                    )
                    error_count += 1
                    continue
                
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                lottery_draw, created = LotteryDraw.objects.update_or_create(
                    draw_date=draw_date,
                    defaults=converted_data
                )
                
                if created:
                    synced_count += 1
                    self.stdout.write(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà: {date_str}")
                else:
                    if force:
                        updated_count += 1
                        self.stdout.write(f"üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {date_str}")
                    else:
                        self.stdout.write(f"‚è≠Ô∏è ‡∏Ç‡πâ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß: {date_str}")
                
            except Exception as e:
                self.stdout.write(
                    self.style.ERROR(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {date_str}: {e}")
                )
                error_count += 1
        
        # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
        self.stdout.write("\n" + "="*50)
        self.stdout.write("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        self.stdout.write("="*50)
        self.stdout.write(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà: {synced_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        if force:
            self.stdout.write(f"üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï: {updated_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        self.stdout.write(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {error_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        self.stdout.write(f"üìã ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {synced_count + updated_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        
        if error_count == 0:
            self.stdout.write(self.style.SUCCESS("üéâ ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!"))
        else:
            self.stdout.write(self.style.WARNING("‚ö†Ô∏è ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô ‡πÅ‡∏ï‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô"))
    
    def convert_lotto_data(self, lotto_result):
        """‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å LottoResult ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà LotteryDraw ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£"""
        try:
            result_data = lotto_result.result_data
            
            if not isinstance(result_data, dict):
                return None
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if not self._has_lottery_data(result_data):
                return None
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 1
            first_prize = self._extract_first_prize(result_data)
            if not first_prize:
                return None
            
            # ‡∏î‡∏∂‡∏á‡πÄ‡∏•‡∏Ç 2 ‡∏ï‡∏±‡∏ß (‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 1)
            two_digit = first_prize[-2:] if len(first_prize) >= 2 else ''
            
            # ‡∏î‡∏∂‡∏á‡πÄ‡∏•‡∏Ç 3 ‡∏ï‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤ (‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 2, 3) - ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏ô field length
            three_digit_front = self._extract_three_digit_front(result_data)
            three_digit_front_str = self._limit_field_length(three_digit_front, 100)
            
            # ‡∏î‡∏∂‡∏á‡πÄ‡∏•‡∏Ç 3 ‡∏ï‡∏±‡∏ß‡∏´‡∏•‡∏±‡∏á (‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 4, 5) - ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏ô field length
            three_digit_back = self._extract_three_digit_back(result_data)
            three_digit_back_str = self._limit_field_length(three_digit_back, 100)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß
            converted_data = {
                'draw_round': lotto_result.draw_date.strftime('%d/%m/%Y'),
                'first_prize': first_prize,
                'two_digit': two_digit,
                'three_digit_front': three_digit_front_str,
                'three_digit_back': three_digit_back_str,
            }
            
            return converted_data
            
        except Exception as e:
            logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")
            return None
    
    def _has_lottery_data(self, result_data):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ
        if 'first' in result_data and result_data['first']:
            return True
        if 'response' in result_data and result_data['response']:
            response_data = result_data['response']
            if isinstance(response_data, dict) and 'first' in response_data:
                return True
        if 'data' in result_data and result_data['data']:
            data = result_data['data']
            if isinstance(data, dict) and 'first' in data:
                return True
        return False
    
    def _extract_first_prize(self, result_data):
        """‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 1 ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
        # ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà 1: first ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ö‡∏ô
        if 'first' in result_data and result_data['first']:
            first_data = result_data['first']
            if isinstance(first_data, dict) and 'number' in first_data:
                numbers = first_data['number']
                if isinstance(numbers, list) and numbers:
                    return numbers[0].get('value', '')
                elif isinstance(numbers, str):
                    return numbers
            elif isinstance(first_data, str):
                return first_data
        
        # ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà 2: first ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô response
        if 'response' in result_data and result_data['response']:
            response_data = result_data['response']
            if isinstance(response_data, dict) and 'first' in response_data:
                first_data = response_data['first']
                if isinstance(first_data, dict) and 'number' in first_data:
                    numbers = first_data['number']
                    if isinstance(numbers, list) and numbers:
                        return numbers[0].get('value', '')
                    elif isinstance(numbers, str):
                        return numbers
                elif isinstance(first_data, str):
                    return first_data
        
        # ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà 3: first ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô data
        if 'data' in result_data and result_data['data']:
            data = result_data['data']
            if isinstance(data, dict) and 'first' in data:
                first_data = data['first']
                if isinstance(first_data, dict) and 'number' in first_data:
                    numbers = first_data['number']
                    if isinstance(numbers, list) and numbers:
                        return numbers[0].get('value', '')
                    elif isinstance(numbers, str):
                        return numbers
                elif isinstance(first_data, str):
                    return first_data
        
        return None
    
    def _extract_three_digit_front(self, result_data):
        """‡∏î‡∏∂‡∏á‡πÄ‡∏•‡∏Ç 3 ‡∏ï‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤ (‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 2, 3)"""
        three_digit_front = []
        
        for prize_type in ['second', 'third']:
            numbers = self._extract_prize_numbers(result_data, prize_type)
            if numbers:
                three_digit_front.extend(numbers)
        
        return three_digit_front
    
    def _extract_three_digit_back(self, result_data):
        """‡∏î‡∏∂‡∏á‡πÄ‡∏•‡∏Ç 3 ‡∏ï‡∏±‡∏ß‡∏´‡∏•‡∏±‡∏á (‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 4, 5)"""
        three_digit_back = []
        
        for prize_type in ['fourth', 'fifth']:
            numbers = self._extract_prize_numbers(result_data, prize_type)
            if numbers:
                three_digit_back.extend(numbers)
        
        return three_digit_back
    
    def _extract_prize_numbers(self, result_data, prize_type):
        """‡∏î‡∏∂‡∏á‡πÄ‡∏•‡∏Ç‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"""
        numbers = []
        
        # ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà 1: ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ö‡∏ô
        if prize_type in result_data and result_data[prize_type]:
            prize_data = result_data[prize_type]
            numbers.extend(self._parse_prize_data(prize_data))
        
        # ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà 2: ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô response
        if 'response' in result_data and result_data['response']:
            response_data = result_data['response']
            if isinstance(response_data, dict) and prize_type in response_data:
                prize_data = response_data[prize_type]
                numbers.extend(self._parse_prize_data(prize_data))
        
        # ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà 3: ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô data
        if 'data' in result_data and result_data['data']:
            data = result_data['data']
            if isinstance(data, dict) and prize_type in data:
                prize_data = data[prize_type]
                numbers.extend(self._parse_prize_data(prize_data))
        
        return numbers
    
    def _parse_prize_data(self, prize_data):
        """‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏Ç"""
        numbers = []
        
        if isinstance(prize_data, list):
            for item in prize_data:
                if isinstance(item, dict):
                    if 'value' in item:
                        numbers.append(str(item['value']))
                    elif 'number' in item:
                        numbers.append(str(item['number']))
                elif isinstance(item, str):
                    numbers.append(item)
        elif isinstance(prize_data, str):
            numbers.append(prize_data)
        elif isinstance(prize_data, dict):
            if 'number' in prize_data:
                number_data = prize_data['number']
                if isinstance(number_data, list):
                    for item in number_data:
                        if isinstance(item, dict) and 'value' in item:
                            numbers.append(str(item['value']))
                        elif isinstance(item, str):
                            numbers.append(str(item))
                elif isinstance(number_data, str):
                    numbers.append(number_data)
        
        return numbers

    def _limit_field_length(self, numbers, max_length):
        """‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á field ‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô max_length"""
        if not numbers:
            return ''
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å
        result = [str(numbers[0])]
        current_length = len(result[0])
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô
        for number in numbers[1:]:
            number_str = str(number)
            # +2 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ", " ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°
            if current_length + len(number_str) + 2 <= max_length:
                result.append(number_str)
                current_length += len(number_str) + 2
            else:
                break
        
        return ', '.join(result)
