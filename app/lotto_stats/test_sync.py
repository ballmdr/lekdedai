#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á lotto_stats
"""

import os
import sys
import django
from datetime import datetime, timedelta

# ‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡∏Ç‡∏≠‡∏á Django project
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'lekdedai.settings')
django.setup()

from lotto_stats.lotto_sync_service import LottoSyncService
from lotto_stats.models import LotteryDraw
from lottery_checker.models import LottoResult

def test_sync_service():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö LottoSyncService"""
    print("üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö LottoSyncService...")
    
    service = LottoSyncService()
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    print("1. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞...")
    status = service.get_sync_status()
    print(f"   ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {status}")
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    print("2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î...")
    result = service.sync_recent_data(days_back=7, force_update=False)
    print(f"   ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: {result}")
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞
    print("3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞...")
    test_date = datetime.now().date() - timedelta(days=1)
    result = service.sync_specific_date(test_date, force_update=False)
    print(f"   ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: {result}")
    
    return True

def test_data_conversion():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
    print("üîÑ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏ô lottery_checker
    test_date = datetime.now().date()
    test_data = {
        'first': {'number': '123456'},
        'second': ['789', '012'],
        'third': ['345', '678'],
        'fourth': ['901', '234'],
        'fifth': ['567', '890']
    }
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô lottery_checker
    lotto_result, created = LottoResult.objects.update_or_create(
        draw_date=test_date,
        defaults={
            'result_data': test_data,
            'source': 'Test Data'
        }
    )
    
    print(f"   ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {created}")
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    service = LottoSyncService()
    converted_data = service._convert_lotto_data(lotto_result)
    
    print(f"   ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß: {converted_data}")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    expected = {
        'draw_round': test_date.strftime('%d/%m/%Y'),
        'first_prize': '123456',
        'two_digit': '56',
        'three_digit_front': '789, 012, 345, 678',
        'three_digit_back': '901, 234, 567, 890'
    }
    
    is_correct = all(
        converted_data.get(key) == expected[key] 
        for key in expected.keys()
    )
    
    print(f"   ‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {is_correct}")
    
    # ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    lotto_result.delete()
    
    return is_correct

def test_statistics_calculation():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥"""
    print("üìä ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥...")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô lotto_stats ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    total_draws = LotteryDraw.objects.count()
    print(f"   ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô lotto_stats: {total_draws}")
    
    if total_draws > 0:
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        from lotto_stats.stats_calculator import StatsCalculator
        
        calculator = StatsCalculator()
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏•‡∏Ç‡∏Æ‡∏≠‡∏ï
        hot_numbers = calculator.get_hot_numbers(limit=5, days=90)
        print(f"   ‡πÄ‡∏•‡∏Ç‡∏Æ‡∏≠‡∏ï: {[num['number'] for num in hot_numbers[:3]]}")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏•‡∏Ç‡πÄ‡∏¢‡πá‡∏ô
        cold_numbers = calculator.get_cold_numbers(limit=5)
        print(f"   ‡πÄ‡∏•‡∏Ç‡πÄ‡∏¢‡πá‡∏ô: {[num['number'] for num in cold_numbers[:3]]}")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏£‡∏∏‡∏õ
        summary = calculator.get_statistics_summary()
        if summary:
            print(f"   ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥: {summary['total_draws']} ‡∏á‡∏ß‡∏î")
        
        return True
    else:
        print("   ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô lotto_stats ‡πÉ‡∏´‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö")
        return False

def test_api_endpoints():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö API endpoints"""
    print("üåê ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API endpoints...")
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ã‡∏¥‡∏á‡∏Ñ‡πå
    print("1. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ã‡∏¥‡∏á‡∏Ñ‡πå...")
    try:
        from django.test import Client
        from django.urls import reverse
        
        client = Client()
        response = client.get('/lotto_stats/api/sync/status/')
        print(f"   Status Code: {response.status_code}")
        print(f"   Response: {response.json()}")
        
    except Exception as e:
        print(f"   ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
    
    return True

def run_all_tests():
    """‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö lotto_stats...")
    print("=" * 50)
    
    tests = [
        ("LottoSyncService", test_sync_service),
        ("‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", test_data_conversion),
        ("‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥", test_statistics_calculation),
        ("API Endpoints", test_api_endpoints),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            print(f"\nüß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {test_name}")
            result = test_func()
            results.append((test_name, result))
            print(f"‚úÖ {test_name}: {'‡∏ú‡πà‡∏≤‡∏ô' if result else '‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô'}")
        except Exception as e:
            print(f"‚ùå {test_name}: ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î - {e}")
            results.append((test_name, False))
    
    # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    print("\n" + "=" * 50)
    print("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö")
    print("=" * 50)
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ ‡∏ú‡πà‡∏≤‡∏ô" if result else "‚ùå ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô"
        print(f"{test_name}: {status}")
    
    print(f"\n‡∏ú‡∏•‡∏£‡∏ß‡∏°: {passed}/{total} ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ú‡πà‡∏≤‡∏ô")
    
    if passed == total:
        print("üéâ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ú‡πà‡∏≤‡∏ô!")
        return True
    else:
        print("‚ö†Ô∏è ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô")
        return False

if __name__ == "__main__":
    success = run_all_tests()
    sys.exit(0 if success else 1)
